type token =
  | IDENT of (string)
  | CST_CHAR of (string)
  | CST_INT of (string)
  | CST_FLOAT of (string)
  | CST_STRING of (string)
  | NAMED_TYPE of (string)
  | GNU_ATTRS of (Cabs.gnu_attrs)
  | EOF
  | CHAR
  | INT
  | DOUBLE
  | FLOAT
  | VOID
  | ENUM
  | STRUCT
  | TYPEDEF
  | UNION
  | SIGNED
  | UNSIGNED
  | LONG
  | SHORT
  | VOLATILE
  | EXTERN
  | STATIC
  | CONST
  | AUTO
  | REGISTER
  | RESTRICT
  | TEMPLATE
  | GLOBAL
  | SHARED
  | SIZEOF
  | ASM
  | EQ of (string * int)
  | PLUS_EQ of (string * int)
  | MINUS_EQ of (string * int)
  | STAR_EQ of (string * int)
  | SLASH_EQ of (string * int)
  | PERCENT_EQ of (string * int)
  | AND_EQ of (string * int)
  | PIPE_EQ of (string * int)
  | CIRC_EQ of (string * int)
  | INF_INF_EQ of (string * int)
  | SUP_SUP_EQ of (string * int)
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILDE
  | AND
  | PIPE
  | CIRC
  | EXCLAM
  | AND_AND
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS
  | MINUS_MINUS
  | RPAREN of (string * int)
  | LPAREN of (string * int)
  | RBRACE of (string * int)
  | LBRACE of (string * int)
  | LBRACKET of (string * int)
  | RBRACKET of (string * int)
  | COLON of (string * int)
  | SEMICOLON of (string * int)
  | COMMA of (string * int)
  | ELLIPSIS of (string * int)
  | QUEST of (string * int)
  | BREAK of (string * int)
  | CONTINUE of (string * int)
  | GOTO of (string * int)
  | RETURN of (string * int)
  | SWITCH of (string * int)
  | CASE of (string * int)
  | DEFAULT of (string * int)
  | WHILE of (string * int)
  | DO of (string * int)
  | FOR of (string * int)
  | IF of (string * int)
  | ELSE of (string * int)
  | ATTRIBUTE
  | EXTENSION
  | INLINE

open Parsing;;
let _ = parse_error;;
# 35 "cparser.mly"
open Cabs
let version = "Cparser V3.0b 10.9.99 Hugues Cassé"

let parse_error _ =
	Clexer.display_error "Syntax error" (Parsing.symbol_start ()) (Parsing.symbol_end ())

(*let fatal _ =
	Clexer.display_error "fatal error" (Parsing.symbol_start ()) (Parsing.symbol_end
	())*)


(*
** Type analysis
*)
type modifier =
	BASE_SIZE of size
	| BASE_SIGN of sign
	| BASE_STORAGE of storage
	| BASE_VOLATILE
	| BASE_CONST
	| BASE_GNU_ATTR of Cabs.gnu_attrs
    | BASE_GLOBAL
    | BASE_SHARED

let apply_mod (typ, sto) modi =
	let rec mod_root typ =
		match (typ, modi) with
		(NO_TYPE, BASE_SIGN sign) -> INT (NO_SIZE, sign)
		| (NO_TYPE, BASE_SIZE size) -> INT (size, NO_SIGN)
		| (CHAR NO_SIGN, BASE_SIGN sign) -> CHAR sign
		| (INT (NO_SIZE, sign), BASE_SIZE size) -> INT (size, sign)
		| (INT (LONG, sign), BASE_SIZE LONG) -> INT (LONG_LONG, sign)
		| (INT (size, NO_SIGN), BASE_SIGN sign) -> INT (size, sign)
		| (BITFIELD (NO_SIGN, exp), BASE_SIGN sign) -> BITFIELD (sign, exp)
		| (FLOAT false, BASE_SIZE LONG) -> FLOAT true
		| (DOUBLE false, BASE_SIZE LONG) -> DOUBLE true
		| (PTR typ, _) -> PTR (mod_root typ)
		| (CONST typ, _) -> CONST (mod_root typ)
		| (VOLATILE typ, _) -> VOLATILE (mod_root typ)
		| (GNU_TYPE (attrs, typ), _) -> GNU_TYPE (attrs, mod_root typ)
		| (TYPE_LINE (f, l, t), _) -> TYPE_LINE (f, l, mod_root t)
		| _ -> raise BadModifier in
	let check_access typ =
		match typ with
		PROTO _ | OLD_PROTO _ | CONST _ | VOLATILE _ -> false
		| _ -> true in
	match modi with
	  BASE_SIGN _ -> (mod_root typ, sto)
	| BASE_SIZE _ -> (mod_root typ, sto)
	| BASE_CONST ->
		if (check_access typ) then (CONST typ, sto)
		else raise BadModifier
	| BASE_VOLATILE ->
		if (check_access typ) then (VOLATILE typ, sto)
		else raise BadModifier
	| BASE_STORAGE sto' ->
		if sto = NO_STORAGE then (typ, sto')
		else raise BadModifier
	| BASE_GNU_ATTR attrs ->
	   (GNU_TYPE (attrs, typ), sto)
    | BASE_GLOBAL -> (GLOBAL typ, sto)
    | BASE_SHARED -> (SHARED typ, sto)

let apply_mods mods fty =
	List.fold_left apply_mod fty mods

let set_type tst tin =
	let rec set typ =
		match typ with
		NO_TYPE -> tst
		| PTR typ -> PTR (set typ)
		| RESTRICT_PTR typ -> RESTRICT_PTR (set typ)
		| ARRAY (typ, dim) -> ARRAY (set typ, dim)
		| PROTO (typ, pars, ell) -> PROTO (set typ, pars, ell)
		| OLD_PROTO (typ, pars, ell) -> OLD_PROTO (set typ, pars, ell)
		| CONST typ -> CONST (set typ)
		| VOLATILE typ -> VOLATILE (set typ)
		| TYPE_LINE (f, l, t) -> TYPE_LINE (f, l, set t)
		| BITFIELD (NO_SIGN, exp) ->
			(match tst with
				INT (_, sign) -> BITFIELD (sign, exp)
				| _ -> raise BadType)
		| _ -> raise BadType in
	set tin


(*
** Expression building 
*)
let smooth_expression lst =
	match lst with
		[] -> NOTHING
		| [expr] -> expr
		| _ -> COMMA (List.rev lst)
let list_expression expr =
	match expr with
		COMMA lst -> lst
		| NOTHING -> []
		| _ -> [expr]


(*** Named Building ***)
let set_name (typ : base_type) (id, typ', attr, exp) =
	(id, set_type typ typ', attr, exp)
	
let set_name_group (typ, sto) (lst : name list)
: name_group =
	(typ, sto, List.map (set_name typ) lst)
	
let set_single (typ, sto) name : single_name =
	(typ, sto, set_name typ name)

let set_data (id, typ, attr, _) ini = (id, typ, attr, ini)

let apply_qual ((t1, q1) : base_type * modifier list)
			   ((t2, q2) : base_type * modifier list)
			   : base_type * modifier list =
	((if t1 = NO_TYPE then t2 else
		if t2 = NO_TYPE then t1 else  raise BadModifier),
	List.append q1 q2)

(*** Line management ***)
let set_line (file, line) stat =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.STAT_LINE (stat, file, line)
	else stat

let set_eline (file, line) expr =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.EXPR_LINE (expr, file, line)
	else expr

let set_tline _type =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.TYPE_LINE (Clexer.curfile (), Clexer.curline(), _type)
	else _type

# 238 "cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  264 (* CHAR *);
  265 (* INT *);
  266 (* DOUBLE *);
  267 (* FLOAT *);
  268 (* VOID *);
  269 (* ENUM *);
  270 (* STRUCT *);
  271 (* TYPEDEF *);
  272 (* UNION *);
  273 (* SIGNED *);
  274 (* UNSIGNED *);
  275 (* LONG *);
  276 (* SHORT *);
  277 (* VOLATILE *);
  278 (* EXTERN *);
  279 (* STATIC *);
  280 (* CONST *);
  281 (* AUTO *);
  282 (* REGISTER *);
  283 (* RESTRICT *);
  284 (* TEMPLATE *);
  285 (* GLOBAL *);
  286 (* SHARED *);
  287 (* SIZEOF *);
  288 (* ASM *);
  300 (* ARROW *);
  301 (* DOT *);
  302 (* EQ_EQ *);
  303 (* EXCLAM_EQ *);
  304 (* INF *);
  305 (* SUP *);
  306 (* INF_EQ *);
  307 (* SUP_EQ *);
  308 (* PLUS *);
  309 (* MINUS *);
  310 (* STAR *);
  311 (* SLASH *);
  312 (* PERCENT *);
  313 (* TILDE *);
  314 (* AND *);
  315 (* PIPE *);
  316 (* CIRC *);
  317 (* EXCLAM *);
  318 (* AND_AND *);
  319 (* PIPE_PIPE *);
  320 (* INF_INF *);
  321 (* SUP_SUP *);
  322 (* PLUS_PLUS *);
  323 (* MINUS_MINUS *);
  347 (* ATTRIBUTE *);
  348 (* EXTENSION *);
  349 (* INLINE *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_INT *);
  260 (* CST_FLOAT *);
  261 (* CST_STRING *);
  262 (* NAMED_TYPE *);
  263 (* GNU_ATTRS *);
  289 (* EQ *);
  290 (* PLUS_EQ *);
  291 (* MINUS_EQ *);
  292 (* STAR_EQ *);
  293 (* SLASH_EQ *);
  294 (* PERCENT_EQ *);
  295 (* AND_EQ *);
  296 (* PIPE_EQ *);
  297 (* CIRC_EQ *);
  298 (* INF_INF_EQ *);
  299 (* SUP_SUP_EQ *);
  324 (* RPAREN *);
  325 (* LPAREN *);
  326 (* RBRACE *);
  327 (* LBRACE *);
  328 (* LBRACKET *);
  329 (* RBRACKET *);
  330 (* COLON *);
  331 (* SEMICOLON *);
  332 (* COMMA *);
  333 (* ELLIPSIS *);
  334 (* QUEST *);
  335 (* BREAK *);
  336 (* CONTINUE *);
  337 (* GOTO *);
  338 (* RETURN *);
  339 (* SWITCH *);
  340 (* CASE *);
  341 (* DEFAULT *);
  342 (* WHILE *);
  343 (* DO *);
  344 (* FOR *);
  345 (* IF *);
  346 (* ELSE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\005\000\005\000\005\000\005\000\
\007\000\007\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\006\000\006\000\006\000\010\000\010\000\
\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\035\000\
\036\000\044\000\044\000\045\000\045\000\045\000\037\000\037\000\
\046\000\047\000\047\000\047\000\049\000\049\000\049\000\050\000\
\050\000\050\000\050\000\048\000\048\000\051\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\013\000\
\014\000\014\000\014\000\016\000\016\000\017\000\017\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\015\000\015\000\015\000\019\000\019\000\020\000\020\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\038\000\038\000\038\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\054\000\054\000\054\000\054\000\039\000\039\000\055\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\057\000\057\000\058\000\059\000\059\000\059\000\
\061\000\061\000\063\000\063\000\064\000\064\000\064\000\062\000\
\062\000\062\000\060\000\060\000\065\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\033\000\033\000\033\000\067\000\067\000\
\068\000\069\000\069\000\069\000\071\000\071\000\073\000\073\000\
\074\000\074\000\074\000\074\000\072\000\072\000\072\000\072\000\
\072\000\072\000\070\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\076\000\
\077\000\077\000\077\000\079\000\079\000\080\000\080\000\080\000\
\081\000\081\000\082\000\082\000\082\000\078\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\084\000\084\000\085\000\085\000\086\000\086\000\
\029\000\029\000\032\000\032\000\032\000\030\000\030\000\031\000\
\031\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\027\000\027\000\
\027\000\027\000\034\000\034\000\087\000\088\000\023\000\089\000\
\089\000\090\000\090\000\091\000\025\000\025\000\026\000\026\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\092\000\094\000\094\000\
\095\000\095\000\093\000\093\000\096\000\096\000\043\000\043\000\
\022\000\022\000\040\000\040\000\040\000\097\000\097\000\098\000\
\098\000\099\000\099\000\099\000\100\000\100\000\000\000\000\000"

let yylen = "\002\000\
\002\000\000\000\001\000\001\000\002\000\003\000\003\000\004\000\
\002\000\004\000\005\000\006\000\002\000\003\000\003\000\001\000\
\000\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\001\000\003\000\
\002\000\004\000\001\000\003\000\002\000\003\000\003\000\003\000\
\003\000\004\000\003\000\004\000\006\000\004\000\006\000\002\000\
\002\000\001\000\002\000\001\000\003\000\003\000\001\000\002\000\
\003\000\003\000\003\000\002\000\000\000\001\000\001\000\001\000\
\002\000\002\000\002\000\001\000\003\000\001\000\001\000\002\000\
\003\000\003\000\004\000\003\000\004\000\006\000\003\000\003\000\
\002\000\003\000\003\000\000\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\001\000\003\000\002\000\004\000\001\000\
\001\000\002\000\003\000\003\000\003\000\003\000\004\000\003\000\
\004\000\006\000\003\000\001\000\002\000\002\000\001\000\001\000\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\001\000\002\000\002\000\002\000\001\000\003\000\002\000\001\000\
\002\000\003\000\003\000\003\000\003\000\004\000\003\000\004\000\
\006\000\003\000\002\000\001\000\003\000\002\000\003\000\003\000\
\000\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\002\000\002\000\003\000\001\000\001\000\000\000\001\000\001\000\
\002\000\003\000\003\000\003\000\003\000\004\000\003\000\004\000\
\006\000\003\000\003\000\000\000\001\000\003\000\003\000\001\000\
\002\000\003\000\003\000\002\000\000\000\001\000\001\000\002\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\001\000\000\000\001\000\001\000\002\000\003\000\
\003\000\003\000\003\000\004\000\003\000\006\000\003\000\002\000\
\002\000\003\000\003\000\000\000\001\000\001\000\002\000\002\000\
\001\000\002\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\003\000\003\000\003\000\004\000\003\000\006\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\004\000\005\000\002\000\004\000\005\000\002\000\
\004\000\005\000\001\000\001\000\001\000\003\000\001\000\003\000\
\003\000\001\000\001\000\003\000\002\000\000\000\001\000\001\000\
\003\000\001\000\001\000\002\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\004\000\
\005\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\003\000\000\000\
\001\000\001\000\002\000\002\000\000\000\001\000\001\000\002\000\
\001\000\001\000\002\000\001\000\005\000\007\000\005\000\005\000\
\007\000\010\000\009\000\003\000\004\000\003\000\002\000\003\000\
\002\000\002\000\003\000\005\000\008\000\002\000\001\000\003\000\
\004\000\007\000\000\000\002\000\001\000\003\000\000\000\001\000\
\001\000\002\000\006\000\001\000\001\000\000\000\001\000\001\000\
\003\000\001\000\001\000\004\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\023\000\024\000\021\000\022\000\
\000\000\025\000\026\000\000\000\124\001\125\001\135\001\000\000\
\000\000\004\000\000\000\000\000\000\000\019\000\000\000\136\001\
\000\000\000\000\242\000\243\000\245\000\244\000\241\000\000\000\
\000\000\000\000\248\000\249\000\246\000\247\000\000\000\000\000\
\000\000\000\000\129\000\116\000\000\000\000\000\000\000\001\000\
\005\000\035\000\000\000\000\000\009\000\000\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\020\000\027\000\
\000\000\128\000\127\000\124\000\123\000\003\001\004\001\000\000\
\000\000\000\000\000\000\000\000\000\000\118\000\117\000\136\000\
\000\000\000\000\000\000\133\000\000\000\126\000\125\000\132\000\
\131\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\121\001\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\077\001\007\000\000\000\062\000\063\000\000\000\055\000\
\000\000\000\000\015\000\030\000\029\000\014\000\000\000\000\000\
\000\000\005\001\000\000\158\000\157\000\159\000\000\000\148\000\
\000\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\135\000\000\000\000\000\133\001\073\001\071\001\072\001\
\075\001\134\001\131\001\000\000\000\000\000\000\128\001\000\000\
\000\000\000\000\000\000\000\000\122\001\000\000\032\000\052\000\
\195\000\193\000\194\000\000\000\196\000\000\000\000\000\000\000\
\184\000\000\000\000\000\000\000\191\000\019\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\018\001\000\000\000\000\000\000\000\000\091\000\093\000\
\088\000\090\000\089\000\092\000\095\000\094\000\000\000\090\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\001\000\000\000\000\000\000\086\000\
\092\001\087\001\078\001\000\000\000\000\096\000\000\000\008\000\
\056\000\071\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\064\000\000\000\000\000\000\000\001\001\000\000\000\000\
\251\000\147\000\000\000\168\000\000\000\000\000\000\000\164\000\
\000\000\000\000\000\000\160\000\000\000\156\000\000\000\254\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\143\000\000\000\000\000\000\000\076\001\000\000\000\000\000\000\
\000\000\044\000\046\000\000\000\051\000\000\000\205\000\206\000\
\000\000\000\000\185\000\000\000\000\000\000\000\197\000\000\000\
\192\000\000\000\020\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\228\000\227\000\000\000\000\000\229\000\
\000\000\000\000\000\000\000\000\225\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\001\031\001\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\034\000\000\000\000\000\
\105\001\106\001\000\000\103\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\105\000\000\000\000\000\
\000\000\100\000\000\000\000\000\000\000\000\000\097\000\087\000\
\088\001\091\001\079\001\000\000\000\000\000\000\000\000\057\000\
\000\000\000\000\000\000\058\000\059\000\066\000\067\000\065\000\
\011\000\000\000\006\001\002\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\149\000\000\000\000\000\000\000\152\000\
\151\000\161\000\162\000\252\000\255\000\000\000\144\000\142\000\
\012\000\123\001\129\001\000\000\000\000\000\000\053\000\054\000\
\182\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\186\000\187\000\201\000\199\000\200\000\202\000\198\000\
\000\000\036\001\037\001\000\000\000\000\000\000\216\000\000\000\
\000\000\000\000\222\000\000\000\226\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\001\033\001\034\001\035\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\001\000\000\100\001\000\000\107\001\
\104\001\000\000\000\000\102\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\000\000\000\000\000\000\083\000\099\000\098\000\082\000\
\000\000\000\000\000\000\069\000\000\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\163\000\000\000\175\000\
\000\000\000\000\132\001\045\000\047\000\000\000\000\000\000\000\
\000\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\219\000\218\000\223\000\
\224\000\039\001\040\001\000\000\009\001\000\000\000\000\000\000\
\000\000\000\000\101\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\000\000\112\000\
\000\000\000\000\000\000\077\000\075\000\000\000\176\000\174\000\
\145\000\000\000\212\000\000\000\000\000\000\000\000\000\000\000\
\238\000\000\000\000\000\012\001\108\001\000\000\000\000\000\000\
\111\001\000\000\095\001\096\001\000\000\000\000\000\000\000\000\
\000\000\113\000\111\000\103\000\000\000\000\000\000\000\000\000\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\177\000\214\000\000\000\000\000\
\000\000\112\001\117\001\000\000\000\000\097\001\000\000\000\000\
\094\001\114\000\239\000\113\001\000\000\000\000\109\001\000\000\
\000\000\000\000\118\001\000\000\099\001\000\000\098\001\114\001"

let yydgoto = "\003\000\
\015\000\016\000\017\000\018\000\019\000\060\000\020\000\021\000\
\022\000\054\000\055\000\148\000\220\000\221\000\125\001\222\000\
\223\000\224\000\121\001\122\001\123\001\104\000\225\000\226\000\
\227\000\228\000\194\000\195\000\102\001\239\001\229\000\245\001\
\172\000\156\000\057\000\058\000\111\000\041\000\083\000\230\000\
\042\000\043\000\105\000\174\000\175\000\112\000\113\000\237\000\
\114\000\243\000\238\000\239\000\044\000\045\000\084\000\085\000\
\127\000\128\000\129\000\255\000\130\000\005\001\131\000\132\000\
\000\001\001\001\176\000\177\000\178\000\035\001\179\000\040\001\
\180\000\181\000\036\001\057\001\058\001\199\001\059\001\204\001\
\060\001\061\001\200\001\073\000\121\000\122\000\108\000\231\000\
\000\000\000\000\000\000\065\002\126\002\104\002\105\002\140\002\
\157\000\158\000\159\000\160\000"

let yysindex = "\155\002\
\040\000\040\000\000\000\229\014\000\000\000\000\000\000\000\000\
\233\254\000\000\000\000\240\254\000\000\000\000\000\000\069\000\
\040\000\000\000\037\255\072\014\219\001\000\000\198\255\000\000\
\055\000\095\000\000\000\000\000\000\000\000\000\000\000\026\255\
\075\255\087\255\000\000\000\000\000\000\000\000\204\015\204\015\
\023\255\181\000\000\000\000\000\147\006\219\001\021\255\000\000\
\000\000\000\000\086\000\138\000\000\000\207\001\000\000\248\003\
\053\255\030\000\219\001\020\005\219\001\000\000\000\000\000\000\
\229\014\000\000\000\000\000\000\000\000\000\000\000\000\104\255\
\066\255\229\000\102\255\229\000\154\255\000\000\000\000\000\000\
\190\000\023\255\247\001\000\000\064\004\000\000\000\000\000\000\
\000\000\000\000\138\000\075\004\138\000\138\000\138\000\090\255\
\029\255\000\000\196\001\000\000\138\000\016\255\015\006\109\255\
\210\255\000\000\000\000\069\002\000\000\000\000\042\255\000\000\
\179\000\118\014\000\000\000\000\000\000\000\000\023\255\217\255\
\009\255\000\000\104\255\000\000\000\000\000\000\147\255\000\000\
\187\000\219\015\229\000\000\000\229\000\080\000\229\000\023\255\
\023\255\023\255\006\000\024\000\209\001\000\000\023\255\091\000\
\033\006\000\000\013\255\248\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\191\255\227\255\000\000\252\255\
\090\255\090\255\090\255\090\255\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\118\000\032\002\247\000\
\000\000\249\001\234\015\091\000\000\000\000\000\208\007\226\007\
\226\007\226\007\226\007\226\007\226\007\226\007\226\007\233\000\
\000\000\000\000\210\009\142\000\115\007\021\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\001\000\000\
\137\001\145\001\244\001\202\005\191\001\226\007\221\001\232\001\
\069\002\237\001\011\002\000\000\255\001\249\015\029\001\000\000\
\000\000\000\000\000\000\069\002\140\002\000\000\018\002\000\000\
\000\000\000\000\070\001\179\000\154\002\000\000\180\000\030\000\
\030\000\000\000\160\005\203\002\226\007\000\000\104\255\128\255\
\000\000\000\000\055\002\000\000\130\255\187\000\223\002\000\000\
\035\001\229\000\229\000\000\000\072\005\000\000\106\000\000\000\
\185\000\024\000\024\000\024\000\024\000\056\002\000\000\065\002\
\000\000\166\000\040\000\210\255\000\000\073\002\075\004\075\004\
\016\255\000\000\000\000\122\255\000\000\025\002\000\000\000\000\
\036\001\249\001\000\000\074\002\091\000\091\000\000\000\053\005\
\000\000\233\000\000\000\146\003\146\003\183\002\183\002\183\002\
\183\002\183\002\183\002\000\000\000\000\117\002\245\254\000\000\
\125\002\243\254\008\016\239\000\000\000\226\007\226\007\226\007\
\226\007\226\007\226\007\226\007\226\007\226\007\226\007\226\007\
\248\255\004\000\226\007\226\007\226\007\226\007\226\007\226\007\
\226\007\226\007\226\007\226\007\226\007\226\007\226\007\226\007\
\226\007\226\007\226\007\226\007\000\000\000\000\226\007\226\007\
\226\007\000\000\226\007\115\007\210\009\000\000\069\002\204\002\
\000\000\000\000\150\002\000\000\236\008\226\007\026\009\069\002\
\226\007\147\002\165\002\226\007\000\000\000\000\246\001\255\001\
\047\003\000\000\078\004\029\001\232\004\029\001\000\000\000\000\
\000\000\000\000\000\000\179\000\179\000\180\000\035\002\000\000\
\179\000\091\000\058\006\000\000\000\000\000\000\000\000\000\000\
\000\000\210\009\000\000\000\000\226\007\187\000\187\000\187\000\
\048\255\035\001\103\002\000\000\187\000\091\000\131\006\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\000\000\000\000\000\000\170\002\173\002\176\002\000\000\000\000\
\000\000\000\000\249\001\249\001\249\001\214\255\074\002\117\255\
\149\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\192\002\000\000\000\000\226\007\110\002\243\254\000\000\175\002\
\239\000\239\000\000\000\097\005\000\000\210\009\210\009\210\009\
\210\009\210\009\210\009\210\009\210\009\210\009\210\009\210\009\
\000\000\000\000\000\000\000\000\111\015\111\015\180\007\180\007\
\180\007\180\007\146\003\146\003\183\002\183\002\183\002\043\008\
\056\015\085\015\027\015\254\014\137\015\137\015\200\002\208\002\
\103\001\072\009\210\009\000\000\158\255\000\000\121\000\000\000\
\000\000\076\255\069\002\000\000\223\255\237\002\255\001\212\002\
\226\255\255\001\255\001\255\001\133\001\052\000\152\002\000\000\
\255\001\091\000\174\006\032\003\000\000\000\000\000\000\000\000\
\180\000\180\000\001\003\000\000\006\003\000\000\002\002\210\009\
\035\001\035\001\035\001\035\001\007\003\000\000\014\003\000\000\
\066\002\029\003\000\000\000\000\000\000\074\002\074\002\074\002\
\074\002\031\003\000\000\100\002\179\002\183\002\243\254\243\254\
\243\254\250\001\175\002\037\000\247\006\000\000\000\000\000\000\
\000\000\000\000\000\000\226\007\000\000\115\007\036\003\010\255\
\039\003\069\002\000\000\069\002\226\007\062\003\226\007\069\002\
\133\001\133\001\133\001\133\001\037\003\000\000\065\003\000\000\
\124\002\115\007\091\000\000\000\000\000\091\000\000\000\000\000\
\000\000\091\000\000\000\175\002\175\002\175\002\175\002\073\003\
\000\000\131\002\219\014\000\000\000\000\081\003\155\003\082\003\
\000\000\099\003\000\000\000\000\254\255\226\007\108\003\124\003\
\091\000\000\000\000\000\000\000\117\003\121\003\148\003\091\000\
\000\000\226\007\157\003\010\255\233\003\180\003\183\003\191\003\
\226\007\069\002\205\003\000\000\000\000\000\000\206\003\118\009\
\015\004\000\000\000\000\202\003\222\003\000\000\226\007\212\003\
\000\000\000\000\000\000\000\000\232\003\020\004\000\000\215\003\
\069\002\226\007\000\000\069\002\000\000\164\009\000\000\000\000"

let yyrindex = "\000\000\
\150\000\124\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\050\255\211\005\000\000\253\002\000\000\
\193\000\032\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\200\001\000\000\000\000\051\002\139\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\007\
\000\000\023\016\060\255\073\255\060\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\003\038\016\033\003\038\016\106\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\003\000\000\000\000\000\000\
\000\000\000\000\000\000\250\003\000\000\000\000\000\000\223\003\
\000\000\000\000\000\000\000\000\000\000\062\008\000\000\248\006\
\089\007\000\000\000\000\018\007\000\000\000\000\023\016\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\016\000\000\
\128\001\000\000\122\005\000\000\038\016\038\016\038\016\000\000\
\000\000\000\000\000\000\021\002\000\000\000\000\000\000\062\008\
\000\000\000\000\000\000\251\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\008\000\000\253\003\000\000\026\000\
\251\003\083\004\111\004\199\004\000\000\135\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\004\013\004\
\000\000\199\255\000\000\142\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\016\
\000\000\000\000\169\255\000\000\000\000\190\008\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\016\000\000\000\000\000\000\000\000\000\000\186\007\000\000\
\000\000\000\000\000\000\047\008\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\091\003\109\002\
\109\002\000\000\123\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\001\000\000\167\002\207\000\000\000\000\000\
\120\003\155\255\155\255\000\000\039\001\000\000\038\016\000\000\
\038\016\095\003\214\003\070\004\073\004\005\001\000\000\000\000\
\000\000\000\000\231\005\157\255\000\000\000\000\000\000\250\003\
\062\008\000\000\000\000\000\000\000\000\083\016\000\000\000\000\
\199\255\220\000\000\000\032\000\066\000\066\000\000\000\245\001\
\000\000\053\016\000\000\204\011\250\011\000\010\046\010\092\010\
\138\010\184\010\230\010\000\000\000\000\000\000\000\000\000\000\
\000\000\248\001\000\000\032\008\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\004\000\000\
\000\000\000\000\000\000\000\000\008\001\000\000\068\016\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\016\
\000\000\000\000\178\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\255\078\002\105\002\078\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\143\255\000\000\000\000\
\000\000\062\008\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\242\000\000\000\000\000\000\000\167\002\167\002\167\002\
\167\002\180\255\000\000\000\000\128\001\062\008\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\008\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\199\255\199\255\199\255\199\255\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\001\248\001\000\000\030\004\
\154\000\154\000\000\000\034\001\000\000\138\002\218\002\005\003\
\149\003\255\003\038\004\115\004\124\004\154\004\163\004\203\004\
\000\000\000\000\000\000\000\000\152\013\198\013\224\012\014\013\
\060\013\106\013\040\012\086\012\020\011\066\011\112\011\244\013\
\080\014\034\014\126\014\140\014\132\012\178\012\000\000\043\255\
\000\000\000\000\089\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\016\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\003\000\000\000\000\000\000\
\000\000\062\008\000\000\129\003\000\000\000\000\000\000\000\000\
\078\000\024\001\105\004\000\000\000\000\000\000\000\000\001\002\
\221\002\018\003\042\003\104\003\235\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\001\050\001\055\001\
\109\001\144\000\000\000\000\000\144\008\158\011\248\001\248\001\
\248\001\248\001\036\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\163\001\000\000\000\000\
\000\000\068\016\000\000\068\016\000\000\000\000\035\004\068\016\
\101\003\211\003\217\003\220\003\248\002\000\000\000\000\000\000\
\000\000\000\000\062\008\000\000\000\000\062\008\000\000\000\000\
\000\000\062\008\000\000\037\004\047\004\050\004\058\004\047\002\
\000\000\000\000\186\014\000\000\000\000\000\000\000\000\170\001\
\000\000\066\004\000\000\000\000\000\000\035\004\000\000\205\001\
\062\008\000\000\000\000\000\000\000\000\000\000\000\000\062\008\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\004\068\016\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\004\000\000\000\000\022\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\016\000\000\000\000\068\016\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\138\005\000\000\246\255\096\005\000\000\192\003\000\000\
\018\000\052\005\051\005\184\000\000\000\052\004\000\000\201\002\
\000\000\045\255\154\003\159\003\184\254\208\255\209\255\057\255\
\000\000\000\000\173\255\083\001\164\254\143\254\174\255\000\000\
\138\255\000\000\000\000\000\000\000\000\107\005\059\005\255\255\
\241\255\242\255\175\255\159\004\000\000\082\005\000\000\000\000\
\214\002\000\000\059\004\034\255\169\004\000\000\058\005\093\001\
\077\000\165\255\000\000\000\000\218\003\000\000\000\000\144\255\
\049\004\025\255\000\000\165\004\000\000\000\000\208\003\000\000\
\000\000\034\005\001\255\178\004\000\000\000\000\050\003\000\000\
\000\000\207\254\145\254\221\004\098\005\243\004\000\000\000\000\
\000\000\000\000\000\000\161\003\000\000\000\000\111\003\000\000\
\222\004\000\000\224\004\000\000"

let yytablesize = 4455
let yytable = "\023\000\
\023\000\000\002\097\000\146\000\061\000\062\000\049\000\244\001\
\155\000\107\000\205\001\128\001\134\001\135\001\102\002\023\000\
\168\000\114\001\006\001\064\000\196\000\154\001\155\001\080\000\
\046\000\016\001\070\000\119\001\129\001\050\000\090\000\071\000\
\139\000\183\001\184\001\250\000\169\000\050\000\063\000\170\000\
\197\001\171\000\250\000\119\001\064\000\117\000\005\002\007\002\
\251\000\098\000\016\000\119\001\047\000\252\000\098\000\198\001\
\195\001\064\000\064\000\064\000\017\000\019\001\018\001\232\000\
\099\001\109\000\020\001\110\000\048\000\119\001\119\001\003\000\
\126\000\013\000\126\000\070\000\081\000\116\000\246\000\098\000\
\071\000\103\002\051\000\098\000\247\000\051\002\052\002\070\000\
\101\000\092\000\051\000\082\000\071\000\119\001\119\001\165\000\
\072\000\052\000\241\000\242\000\173\000\253\000\165\000\016\000\
\120\000\052\000\012\000\013\000\014\000\055\001\015\001\053\000\
\106\000\017\000\003\001\004\001\254\000\015\001\016\000\012\000\
\013\000\014\000\175\001\106\000\016\000\126\000\013\000\176\001\
\017\000\126\000\251\000\126\000\126\000\126\000\017\000\252\000\
\123\000\165\000\012\000\013\000\014\000\013\000\173\000\066\002\
\054\001\074\000\098\000\013\000\163\001\002\000\150\001\099\001\
\134\000\151\001\057\002\153\000\152\001\076\000\102\000\246\001\
\153\000\103\000\173\001\038\001\039\001\017\002\018\002\124\000\
\252\001\014\002\125\000\250\000\133\000\250\000\025\002\026\002\
\027\002\028\002\173\000\038\002\039\002\040\002\041\002\253\000\
\042\002\073\002\074\002\075\002\185\001\076\002\056\001\092\002\
\093\002\094\002\095\002\155\000\155\000\148\001\254\000\012\000\
\013\000\014\000\056\000\247\000\153\001\033\000\126\001\127\001\
\153\000\007\001\072\000\009\001\065\000\111\002\031\001\055\001\
\249\000\072\000\072\000\032\001\012\000\013\000\014\000\153\000\
\135\000\100\002\153\000\061\002\144\001\153\000\153\000\033\000\
\033\000\062\002\096\000\099\000\016\001\012\000\013\000\014\000\
\182\001\016\001\197\000\016\001\016\001\116\002\162\001\169\000\
\217\001\245\000\054\001\098\000\128\002\218\001\169\000\169\000\
\126\000\126\000\022\001\126\000\219\001\126\000\080\000\126\000\
\169\001\220\001\204\000\033\001\240\001\241\001\204\000\144\002\
\021\001\023\000\204\000\021\002\161\000\162\000\163\000\173\000\
\164\000\192\001\034\001\250\001\173\000\152\002\253\001\098\000\
\240\001\001\002\068\002\173\000\173\000\072\002\191\001\031\002\
\056\001\012\002\099\001\202\001\203\001\099\001\023\001\034\002\
\012\000\013\000\014\000\067\002\117\001\109\000\004\000\110\000\
\023\002\118\001\056\001\081\000\005\000\006\000\007\000\008\000\
\024\001\127\002\189\000\009\000\010\000\011\000\006\002\189\000\
\017\000\099\001\082\000\066\000\033\002\017\000\067\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\050\000\017\000\
\017\000\017\000\017\000\017\000\144\000\130\001\026\001\145\000\
\012\000\013\000\014\000\203\000\124\000\130\001\044\002\125\000\
\096\002\119\001\093\000\203\000\053\002\094\000\015\002\169\000\
\095\000\025\001\170\000\068\000\171\000\098\000\069\000\189\000\
\120\001\098\000\107\002\002\000\108\002\017\000\124\000\207\000\
\112\002\125\000\012\000\013\000\014\000\189\000\189\000\207\000\
\173\000\189\000\050\000\051\000\017\000\189\000\012\000\013\000\
\014\000\074\000\017\000\079\002\050\002\008\001\017\000\165\000\
\074\000\074\000\052\000\017\000\173\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\173\000\017\000\017\000\017\000\
\017\000\017\000\012\000\013\000\014\000\140\000\141\000\164\001\
\012\000\013\000\014\000\234\000\165\000\012\000\013\000\014\000\
\081\002\027\001\145\002\251\000\063\002\056\002\080\000\051\000\
\252\000\122\000\064\002\098\000\012\000\013\000\014\000\056\001\
\056\001\086\000\056\001\017\000\087\000\124\000\052\000\220\000\
\125\000\157\002\136\000\215\000\159\002\137\000\098\001\215\000\
\138\000\099\001\017\000\215\000\117\002\220\000\220\000\118\002\
\017\000\220\000\098\002\119\002\010\001\011\001\012\001\013\001\
\235\000\182\000\150\000\151\000\152\000\153\000\168\001\007\001\
\253\000\099\001\109\002\081\000\240\001\007\001\122\000\236\000\
\138\001\124\000\131\002\139\001\125\000\052\001\165\001\254\000\
\053\001\135\002\082\000\052\001\165\000\122\000\053\001\183\000\
\173\000\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\166\000\012\000\013\000\014\000\166\000\101\001\
\012\000\013\000\014\000\240\001\184\000\185\000\186\000\204\000\
\119\000\187\000\188\000\204\000\031\001\189\000\109\001\150\000\
\111\001\032\001\190\000\191\000\150\000\192\000\240\001\106\000\
\165\000\199\000\200\000\201\000\202\000\203\000\204\000\008\001\
\179\001\205\000\206\000\180\001\240\001\008\001\181\001\012\000\
\013\000\014\000\030\001\012\000\013\000\014\000\234\000\146\001\
\146\000\012\000\013\000\014\000\146\000\010\001\210\000\146\000\
\146\000\173\000\010\001\010\001\173\000\119\000\210\000\217\000\
\173\000\033\001\132\001\073\000\150\000\133\001\103\001\146\000\
\146\000\146\000\073\000\073\000\119\000\217\000\217\000\158\001\
\034\001\217\000\159\001\150\000\167\000\167\000\150\000\173\000\
\167\000\150\000\150\000\167\000\167\000\209\000\173\000\012\000\
\013\000\014\000\208\000\235\000\017\000\209\000\012\000\013\000\
\014\000\017\000\208\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\236\000\017\000\017\000\017\000\017\000\017\000\
\206\001\207\001\208\001\209\001\210\001\211\001\212\001\213\001\
\214\001\215\001\216\001\001\000\002\000\221\001\222\001\223\001\
\224\001\225\001\226\001\227\001\228\001\229\001\230\001\231\001\
\232\001\233\001\234\001\235\001\236\001\237\001\238\001\059\002\
\211\000\017\000\099\001\242\001\104\001\243\001\101\001\084\000\
\211\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\017\000\084\000\084\000\084\000\084\000\084\000\017\000\166\000\
\120\000\010\002\166\000\166\000\011\002\093\001\093\001\093\001\
\093\001\093\001\093\001\105\001\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\106\001\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\093\001\024\002\
\013\001\093\001\093\001\093\001\093\001\110\001\013\001\005\000\
\006\000\007\000\008\000\110\001\107\001\188\000\117\001\010\000\
\011\000\031\001\188\000\118\001\014\001\120\000\032\001\117\001\
\093\001\093\001\093\001\110\001\118\001\093\001\093\001\166\000\
\102\000\093\001\002\002\103\000\120\000\003\002\093\001\093\001\
\004\002\093\001\093\001\093\001\014\001\144\000\046\002\093\001\
\145\000\100\000\101\000\093\001\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\112\001\093\001\
\093\001\093\001\188\000\119\001\113\001\169\000\033\001\197\001\
\170\000\115\001\171\000\121\000\119\001\012\000\013\000\014\000\
\188\000\188\000\120\001\231\000\188\000\034\001\198\001\231\000\
\188\000\142\000\143\000\120\001\179\000\198\000\150\000\151\000\
\152\000\153\000\085\002\179\000\179\000\099\001\084\000\116\001\
\012\000\013\000\014\000\084\000\012\000\013\000\014\000\131\001\
\137\000\199\000\200\000\201\000\202\000\203\000\204\000\137\000\
\137\000\205\000\206\000\183\000\207\000\177\001\019\002\138\001\
\121\000\081\000\139\001\028\001\029\001\061\000\081\000\137\000\
\137\000\137\000\240\000\012\000\013\000\014\000\240\000\121\000\
\184\000\185\000\186\000\060\000\166\001\187\000\188\000\046\002\
\149\001\189\000\047\002\084\000\167\001\048\002\190\000\191\000\
\049\002\192\000\088\002\106\000\170\001\099\001\099\002\208\000\
\101\001\185\001\084\000\209\000\210\000\211\000\212\000\213\000\
\214\000\215\000\216\000\217\000\218\000\219\000\081\000\012\000\
\013\000\014\000\061\000\197\001\101\001\182\000\150\000\151\000\
\152\000\153\000\029\002\158\001\091\002\081\000\159\001\099\001\
\060\000\061\000\198\001\182\000\150\000\151\000\152\000\153\000\
\194\001\199\000\200\000\201\000\202\000\203\000\204\000\060\000\
\196\001\205\000\206\000\183\000\115\002\140\001\141\001\099\001\
\012\000\013\000\014\000\121\002\136\002\060\001\099\001\060\001\
\247\001\183\000\060\001\060\001\060\001\060\001\130\001\099\001\
\184\000\185\000\186\000\077\002\010\002\187\000\188\000\011\002\
\248\001\189\000\073\001\074\001\136\001\137\001\190\000\191\000\
\254\001\192\000\166\000\187\000\158\002\035\002\166\000\189\000\
\036\002\166\000\166\000\037\002\190\000\191\000\053\002\192\000\
\093\001\094\001\115\000\095\001\118\000\027\000\096\001\012\000\
\013\000\014\000\027\000\045\002\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\058\002\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\145\001\143\000\000\001\
\115\000\027\000\027\000\099\001\000\001\061\001\071\002\061\001\
\172\000\250\000\061\001\061\001\061\001\061\001\250\000\172\000\
\172\000\156\001\157\001\000\001\000\001\000\001\000\001\000\001\
\000\001\069\002\027\000\000\001\000\001\250\000\250\000\250\000\
\250\000\250\000\250\000\115\000\106\000\250\000\250\000\115\000\
\082\002\027\000\115\000\115\000\013\002\083\002\016\002\027\000\
\062\001\084\002\062\001\086\002\000\001\062\001\062\001\062\001\
\062\001\087\002\115\000\115\000\115\000\171\000\250\000\027\000\
\027\000\027\000\000\001\000\001\171\000\171\000\000\001\106\000\
\089\002\000\001\000\001\090\002\250\000\250\000\106\000\106\000\
\250\000\113\002\253\000\250\000\250\000\170\000\101\002\253\000\
\064\002\000\001\000\001\000\001\170\000\170\000\106\000\106\000\
\106\000\008\002\009\002\250\000\250\000\250\000\253\000\253\000\
\253\000\253\000\253\000\253\000\114\002\109\000\253\000\253\000\
\110\002\009\002\119\001\119\001\036\000\120\002\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\122\002\036\000\036\000\
\036\000\036\000\036\000\123\002\017\001\124\002\036\000\253\000\
\036\000\017\001\140\000\017\001\017\001\070\000\070\000\036\000\
\109\000\140\000\140\000\173\000\125\002\253\000\253\000\109\000\
\109\000\253\000\173\000\173\000\253\000\253\000\129\002\036\000\
\132\002\140\000\140\000\140\000\133\002\073\001\074\001\109\000\
\109\000\109\000\165\000\165\000\253\000\253\000\253\000\083\001\
\084\001\085\001\036\000\102\000\102\000\036\000\036\000\078\000\
\079\000\036\000\036\000\093\001\094\001\130\002\095\001\134\002\
\063\001\096\001\063\001\160\001\161\001\063\001\063\001\063\001\
\063\001\036\000\036\000\036\000\037\000\137\002\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\139\002\037\000\037\000\
\037\000\037\000\037\000\108\000\186\001\187\001\037\000\141\002\
\037\000\107\000\054\002\055\002\110\000\075\000\077\000\037\000\
\039\000\142\002\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\143\002\039\000\039\000\039\000\039\000\039\000\037\000\
\146\002\147\002\039\000\149\002\039\000\150\002\108\000\153\002\
\155\002\139\000\156\002\039\000\107\000\108\000\108\000\110\000\
\139\000\139\000\037\000\107\000\107\000\037\000\110\000\110\000\
\151\002\037\000\037\000\039\000\154\002\108\000\108\000\108\000\
\139\000\139\000\139\000\107\000\107\000\107\000\110\000\110\000\
\110\000\037\000\037\000\037\000\102\000\126\001\039\000\103\000\
\127\001\039\000\064\001\050\000\064\001\039\000\039\000\064\001\
\064\001\064\001\064\001\149\000\150\000\151\000\152\000\153\000\
\181\000\154\000\012\000\013\000\014\000\039\000\039\000\039\000\
\038\000\014\001\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\230\000\038\000\038\000\038\000\038\000\038\000\232\000\
\235\000\065\001\038\000\065\001\038\000\014\001\065\001\065\001\
\065\001\065\001\234\000\038\000\040\000\233\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\236\000\040\000\040\000\
\040\000\040\000\040\000\038\000\144\000\115\001\040\000\145\000\
\040\000\138\000\116\001\024\000\141\000\091\000\147\000\040\000\
\138\000\138\000\010\002\141\000\141\000\011\002\038\000\167\000\
\070\002\038\000\012\000\013\000\014\000\038\000\038\000\040\000\
\138\000\138\000\138\000\141\000\141\000\141\000\255\001\078\002\
\012\000\013\000\014\000\119\000\079\000\038\000\038\000\038\000\
\079\000\244\000\040\000\079\000\079\000\040\000\066\001\174\001\
\066\001\040\000\040\000\066\001\066\001\066\001\066\001\067\001\
\233\000\067\001\178\001\020\002\067\001\067\001\067\001\067\001\
\015\001\040\000\040\000\040\000\041\000\030\002\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\001\041\000\041\000\
\041\000\041\000\041\000\193\001\248\000\068\001\041\000\068\001\
\041\000\106\002\068\001\068\001\068\001\068\001\069\001\041\000\
\069\001\147\001\138\002\069\001\069\001\069\001\069\001\027\000\
\028\000\029\000\030\000\031\000\000\000\172\001\171\001\041\000\
\035\000\036\000\037\000\038\000\199\000\200\000\201\000\202\000\
\203\000\204\000\000\000\000\000\205\000\206\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\041\000\070\001\000\000\
\070\001\041\000\041\000\070\001\070\001\070\001\070\001\000\000\
\000\000\000\000\000\000\027\000\028\000\029\000\030\000\031\000\
\000\000\041\000\041\000\041\000\035\000\036\000\037\000\038\000\
\005\000\006\000\007\000\008\000\000\000\000\000\178\000\000\000\
\010\000\011\000\178\000\000\000\000\000\178\000\178\000\000\000\
\000\000\000\000\000\000\000\000\027\000\028\000\029\000\030\000\
\031\000\000\000\012\000\013\000\014\000\035\000\036\000\037\000\
\038\000\188\001\000\000\000\000\189\001\000\000\190\001\027\000\
\028\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\035\000\036\000\037\000\038\000\124\000\000\000\000\000\125\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\028\000\029\000\030\000\031\000\000\000\012\000\013\000\
\014\000\035\000\036\000\037\000\038\000\052\001\000\000\000\000\
\053\001\000\000\154\000\000\000\000\000\000\000\000\000\154\000\
\000\000\154\000\154\000\154\000\154\000\154\000\154\000\154\000\
\000\000\154\000\154\000\154\000\154\000\154\000\190\000\012\000\
\013\000\014\000\000\000\190\000\000\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\000\000\190\000\190\000\190\000\
\190\000\190\000\012\000\013\000\014\000\000\000\000\000\027\000\
\028\000\029\000\030\000\031\000\000\000\000\000\000\000\154\000\
\035\000\036\000\037\000\038\000\000\000\000\000\000\000\142\001\
\000\000\143\001\000\000\012\000\013\000\014\000\154\000\000\000\
\000\000\154\000\000\000\190\000\154\000\154\000\000\000\000\000\
\000\000\000\000\182\000\150\000\151\000\152\000\153\000\000\000\
\000\000\190\000\190\000\018\000\000\000\190\000\000\000\000\000\
\018\000\190\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\017\000\
\183\000\000\000\000\000\000\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\000\000\000\000\184\000\185\000\186\000\
\000\000\000\000\187\000\188\000\000\000\000\000\189\000\000\000\
\018\000\000\000\000\000\190\000\191\000\000\000\192\000\182\000\
\150\000\151\000\152\000\153\000\108\001\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\017\000\018\000\000\000\000\000\
\000\000\182\000\150\000\151\000\152\000\153\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\183\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\182\000\150\000\151\000\152\000\153\000\183\000\
\000\000\000\000\184\000\185\000\186\000\000\000\000\000\187\000\
\188\000\000\000\000\000\189\000\000\000\000\000\000\000\000\000\
\190\000\191\000\000\000\192\000\184\000\185\000\186\000\193\000\
\183\000\187\000\188\000\000\000\000\000\189\000\000\000\000\000\
\000\000\000\000\190\000\191\000\000\000\192\000\000\000\000\000\
\000\000\017\001\000\000\000\000\000\000\184\000\185\000\186\000\
\000\000\000\000\187\000\188\000\000\000\000\000\189\000\000\000\
\000\000\000\000\000\000\190\000\191\000\000\000\192\000\000\000\
\000\000\000\000\022\002\182\000\150\000\151\000\152\000\153\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\182\000\150\000\151\000\
\152\000\153\000\027\000\028\000\029\000\030\000\031\000\000\000\
\000\000\183\000\000\000\035\000\036\000\037\000\038\000\088\000\
\000\000\000\000\089\000\000\000\000\000\000\000\182\000\150\000\
\151\000\152\000\153\000\183\000\000\000\000\000\184\000\185\000\
\186\000\000\000\000\000\187\000\188\000\000\000\000\000\189\000\
\000\000\000\000\000\000\000\000\190\000\191\000\000\000\192\000\
\184\000\185\000\186\000\032\002\183\000\187\000\188\000\000\000\
\000\000\189\000\000\000\000\000\000\000\000\000\190\000\191\000\
\000\000\192\000\000\000\000\000\000\000\043\002\000\000\000\000\
\000\000\184\000\185\000\186\000\000\000\000\000\187\000\188\000\
\000\000\000\000\189\000\000\000\000\000\000\000\000\000\190\000\
\191\000\000\000\192\000\000\000\000\000\000\000\080\002\182\000\
\150\000\151\000\152\000\153\000\000\000\120\001\000\000\120\001\
\120\001\120\001\120\001\120\001\120\001\120\001\000\000\120\001\
\120\001\120\001\120\001\120\001\000\000\000\000\000\000\120\001\
\000\000\120\001\000\000\000\000\000\000\183\000\000\000\084\000\
\120\001\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\000\000\084\000\084\000\084\000\084\000\084\000\000\000\000\000\
\120\001\000\000\184\000\185\000\186\000\000\000\000\000\187\000\
\188\000\000\000\000\000\189\000\000\000\000\000\000\000\000\000\
\190\000\191\000\000\000\192\000\000\000\000\000\120\001\097\002\
\000\000\000\000\120\001\120\001\119\001\000\000\119\001\119\001\
\119\001\119\001\119\001\119\001\119\001\000\000\119\001\119\001\
\119\001\119\001\119\001\000\000\000\000\000\000\119\001\085\001\
\119\001\000\000\000\000\000\000\000\000\000\000\049\000\119\001\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
\049\000\000\000\049\000\182\000\150\000\151\000\152\000\153\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\119\001\000\000\000\000\
\000\000\119\001\119\001\017\000\000\000\000\000\000\000\000\000\
\017\000\183\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\017\000\017\000\017\000\048\000\
\000\000\000\000\000\000\033\000\033\000\000\000\184\000\185\000\
\186\000\000\000\000\000\187\000\188\000\000\000\000\000\189\000\
\000\000\000\000\000\000\000\000\190\000\191\000\000\000\192\000\
\000\000\100\001\085\000\000\000\000\000\000\000\000\000\085\000\
\017\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\000\000\085\000\085\000\085\000\085\000\085\000\000\000\017\000\
\182\000\150\000\151\000\152\000\153\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\001\
\074\001\000\000\182\000\150\000\151\000\152\000\153\000\081\001\
\082\001\083\001\084\001\085\001\000\000\000\000\183\000\085\000\
\000\000\000\000\000\000\091\001\092\001\093\001\094\001\000\000\
\095\001\000\000\000\000\096\001\000\000\000\000\085\000\000\000\
\183\000\000\000\000\000\184\000\185\000\186\000\000\000\000\000\
\187\000\188\000\000\000\000\000\189\000\000\000\000\000\000\000\
\000\000\190\000\191\000\000\000\042\001\184\000\185\000\186\000\
\000\000\000\000\187\000\188\000\000\000\000\000\189\000\000\000\
\000\000\000\000\000\000\190\000\191\000\221\000\192\000\221\000\
\221\000\221\000\221\000\221\000\221\000\221\000\000\000\221\000\
\221\000\221\000\221\000\221\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\189\000\000\000\189\000\189\000\189\000\
\189\000\189\000\189\000\189\000\000\000\189\000\189\000\189\000\
\189\000\189\000\000\000\000\000\000\000\221\000\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\221\000\221\000\000\000\000\000\221\000\
\000\000\000\000\091\001\092\001\093\001\094\001\000\000\095\001\
\000\000\000\000\096\001\000\000\086\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\180\000\074\001\074\001\074\001\074\001\074\001\074\001\
\074\001\074\001\074\001\074\001\074\001\074\001\074\001\074\001\
\074\001\074\001\074\001\074\001\074\001\074\001\074\001\074\001\
\074\001\074\001\000\000\074\001\074\001\074\001\000\000\074\001\
\074\001\074\001\074\001\074\001\074\001\074\001\074\001\074\001\
\000\000\074\001\074\001\074\001\074\001\074\001\000\000\074\001\
\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\
\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\
\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\
\000\000\021\001\021\001\021\001\000\000\021\001\021\001\021\001\
\021\001\000\000\000\000\021\001\000\000\021\001\000\000\021\001\
\021\001\021\001\021\001\021\001\000\000\021\001\019\001\019\001\
\019\001\019\001\019\001\019\001\019\001\019\001\019\001\019\001\
\019\001\019\001\019\001\019\001\019\001\019\001\019\001\019\001\
\019\001\019\001\019\001\019\001\019\001\019\001\000\000\019\001\
\019\001\019\001\000\000\019\001\019\001\019\001\019\001\019\001\
\019\001\000\000\019\001\000\000\000\000\019\001\000\000\000\000\
\019\001\019\001\000\000\019\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\083\001\084\001\085\001\000\000\086\001\087\001\088\001\
\000\000\089\001\090\001\091\001\092\001\093\001\094\001\000\000\
\095\001\000\000\000\000\096\001\000\000\000\000\249\001\000\000\
\000\000\097\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\000\000\086\001\087\001\088\001\000\000\089\001\
\090\001\091\001\092\001\093\001\094\001\000\000\095\001\000\000\
\000\000\096\001\000\000\251\001\000\000\000\000\000\000\097\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\000\000\086\001\087\001\088\001\000\000\089\001\090\001\091\001\
\092\001\093\001\094\001\000\000\095\001\000\000\000\000\096\001\
\000\000\060\002\000\000\000\000\000\000\097\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\084\001\085\001\000\000\086\001\
\087\001\088\001\000\000\089\001\090\001\091\001\092\001\093\001\
\094\001\148\002\095\001\000\000\000\000\096\001\000\000\000\000\
\000\000\000\000\000\000\097\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\083\001\084\001\085\001\000\000\086\001\087\001\088\001\
\000\000\089\001\090\001\091\001\092\001\093\001\094\001\160\002\
\095\001\000\000\000\000\096\001\000\000\000\000\000\000\000\000\
\000\000\097\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\000\000\086\001\087\001\088\001\000\000\089\001\
\090\001\091\001\092\001\093\001\094\001\000\000\095\001\000\000\
\000\000\096\001\000\000\000\000\000\000\000\000\000\000\097\001\
\024\001\024\001\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\024\001\000\000\000\000\024\001\024\001\024\001\
\024\001\024\001\024\001\024\001\024\001\024\001\024\001\024\001\
\000\000\024\001\024\001\024\001\000\000\024\001\024\001\024\001\
\024\001\000\000\000\000\024\001\000\000\024\001\000\000\000\000\
\024\001\024\001\024\001\024\001\000\000\024\001\027\001\027\001\
\027\001\027\001\027\001\027\001\027\001\027\001\027\001\027\001\
\027\001\000\000\000\000\027\001\027\001\027\001\027\001\027\001\
\027\001\027\001\027\001\027\001\027\001\027\001\000\000\027\001\
\027\001\027\001\000\000\027\001\027\001\027\001\027\001\000\000\
\000\000\027\001\000\000\027\001\000\000\000\000\027\001\027\001\
\027\001\027\001\000\000\027\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\025\001\000\000\
\000\000\025\001\025\001\025\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\000\000\025\001\025\001\025\001\
\000\000\025\001\025\001\025\001\025\001\000\000\000\000\025\001\
\000\000\025\001\000\000\000\000\025\001\025\001\025\001\025\001\
\000\000\025\001\026\001\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\026\001\026\001\000\000\000\000\026\001\
\026\001\026\001\026\001\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\000\000\026\001\026\001\026\001\000\000\026\001\
\026\001\026\001\026\001\000\000\000\000\026\001\000\000\026\001\
\000\000\000\000\026\001\026\001\026\001\026\001\000\000\026\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\028\001\
\028\001\028\001\028\001\000\000\000\000\028\001\028\001\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\028\001\
\000\000\028\001\028\001\028\001\000\000\028\001\028\001\028\001\
\028\001\000\000\000\000\028\001\000\000\028\001\000\000\000\000\
\028\001\028\001\028\001\028\001\000\000\028\001\030\001\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\030\001\030\001\
\030\001\000\000\000\000\030\001\030\001\030\001\030\001\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\000\000\030\001\
\030\001\030\001\000\000\030\001\030\001\030\001\030\001\000\000\
\000\000\030\001\000\000\030\001\000\000\000\000\030\001\030\001\
\030\001\030\001\000\000\030\001\044\001\044\001\044\001\044\001\
\044\001\044\001\044\001\044\001\044\001\044\001\044\001\000\000\
\000\000\044\001\044\001\044\001\044\001\044\001\044\001\044\001\
\044\001\044\001\044\001\044\001\000\000\044\001\044\001\044\001\
\000\000\044\001\044\001\044\001\044\001\000\000\000\000\044\001\
\000\000\044\001\000\000\000\000\044\001\044\001\044\001\044\001\
\000\000\044\001\045\001\045\001\045\001\045\001\045\001\045\001\
\045\001\045\001\045\001\045\001\045\001\000\000\000\000\045\001\
\045\001\045\001\045\001\045\001\045\001\045\001\045\001\045\001\
\045\001\045\001\000\000\045\001\045\001\045\001\000\000\045\001\
\045\001\045\001\045\001\000\000\000\000\045\001\000\000\045\001\
\000\000\000\000\045\001\045\001\045\001\045\001\000\000\045\001\
\046\001\046\001\046\001\046\001\046\001\046\001\046\001\046\001\
\046\001\046\001\046\001\000\000\000\000\046\001\046\001\046\001\
\046\001\046\001\046\001\046\001\046\001\046\001\046\001\046\001\
\000\000\046\001\046\001\046\001\000\000\046\001\046\001\046\001\
\046\001\000\000\000\000\046\001\000\000\046\001\000\000\000\000\
\046\001\046\001\046\001\046\001\000\000\046\001\038\001\038\001\
\038\001\038\001\038\001\038\001\038\001\038\001\038\001\038\001\
\038\001\000\000\000\000\038\001\038\001\038\001\038\001\038\001\
\038\001\038\001\038\001\038\001\038\001\038\001\000\000\038\001\
\038\001\038\001\000\000\038\001\038\001\038\001\038\001\000\000\
\000\000\038\001\000\000\038\001\000\000\000\000\038\001\038\001\
\038\001\038\001\000\000\038\001\022\001\022\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\000\000\
\000\000\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\000\000\000\000\000\000\000\000\022\001\022\001\022\001\
\000\000\022\001\022\001\022\001\022\001\000\000\000\000\022\001\
\000\000\022\001\000\000\000\000\022\001\022\001\022\001\022\001\
\000\000\022\001\023\001\023\001\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\023\001\000\000\000\000\023\001\
\023\001\023\001\023\001\023\001\023\001\023\001\023\001\000\000\
\000\000\000\000\000\000\023\001\023\001\023\001\000\000\023\001\
\023\001\023\001\023\001\000\000\000\000\023\001\000\000\023\001\
\000\000\000\000\023\001\023\001\023\001\023\001\000\000\023\001\
\042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
\042\001\042\001\042\001\000\000\000\000\042\001\042\001\042\001\
\042\001\042\001\042\001\042\001\042\001\000\000\000\000\000\000\
\000\000\042\001\042\001\042\001\000\000\042\001\042\001\042\001\
\042\001\000\000\000\000\042\001\000\000\042\001\000\000\000\000\
\042\001\042\001\042\001\042\001\000\000\042\001\043\001\043\001\
\043\001\043\001\043\001\043\001\043\001\043\001\043\001\043\001\
\043\001\000\000\000\000\043\001\043\001\043\001\043\001\043\001\
\043\001\043\001\043\001\000\000\000\000\000\000\000\000\043\001\
\043\001\043\001\000\000\043\001\043\001\043\001\043\001\000\000\
\000\000\043\001\000\000\043\001\000\000\000\000\043\001\043\001\
\043\001\043\001\000\000\043\001\058\001\058\001\058\001\058\001\
\058\001\058\001\058\001\058\001\058\001\058\001\058\001\000\000\
\000\000\058\001\058\001\058\001\058\001\058\001\058\001\000\000\
\000\000\000\000\000\000\000\000\000\000\058\001\058\001\058\001\
\000\000\058\001\058\001\058\001\058\001\000\000\000\000\058\001\
\000\000\058\001\000\000\000\000\058\001\058\001\058\001\058\001\
\000\000\058\001\059\001\059\001\059\001\059\001\059\001\059\001\
\059\001\059\001\059\001\059\001\059\001\000\000\000\000\059\001\
\059\001\059\001\059\001\059\001\059\001\000\000\000\000\000\000\
\000\000\000\000\000\000\059\001\059\001\059\001\000\000\059\001\
\059\001\059\001\059\001\000\000\000\000\059\001\000\000\059\001\
\000\000\000\000\059\001\059\001\059\001\059\001\000\000\059\001\
\054\001\054\001\054\001\054\001\054\001\054\001\054\001\054\001\
\054\001\054\001\054\001\000\000\000\000\054\001\054\001\054\001\
\054\001\054\001\054\001\000\000\000\000\000\000\000\000\000\000\
\000\000\054\001\054\001\054\001\000\000\054\001\054\001\000\000\
\000\000\000\000\000\000\054\001\000\000\054\001\000\000\000\000\
\054\001\054\001\054\001\054\001\000\000\054\001\055\001\055\001\
\055\001\055\001\055\001\055\001\055\001\055\001\055\001\055\001\
\055\001\000\000\000\000\055\001\055\001\055\001\055\001\055\001\
\055\001\000\000\000\000\000\000\000\000\000\000\000\000\055\001\
\055\001\055\001\000\000\055\001\055\001\000\000\000\000\000\000\
\000\000\055\001\000\000\055\001\000\000\000\000\055\001\055\001\
\055\001\055\001\000\000\055\001\056\001\056\001\056\001\056\001\
\056\001\056\001\056\001\056\001\056\001\056\001\056\001\000\000\
\000\000\056\001\056\001\056\001\056\001\056\001\056\001\000\000\
\000\000\000\000\000\000\000\000\000\000\056\001\056\001\056\001\
\000\000\056\001\056\001\000\000\000\000\000\000\000\000\056\001\
\000\000\056\001\000\000\000\000\056\001\056\001\056\001\056\001\
\000\000\056\001\057\001\057\001\057\001\057\001\057\001\057\001\
\057\001\057\001\057\001\057\001\057\001\000\000\000\000\057\001\
\057\001\057\001\057\001\057\001\057\001\000\000\000\000\000\000\
\000\000\000\000\000\000\057\001\057\001\057\001\000\000\057\001\
\057\001\000\000\000\000\000\000\000\000\057\001\000\000\057\001\
\000\000\000\000\057\001\057\001\057\001\057\001\000\000\057\001\
\052\001\052\001\052\001\052\001\052\001\052\001\052\001\052\001\
\052\001\052\001\052\001\000\000\000\000\052\001\052\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\001\052\001\052\001\000\000\052\001\052\001\000\000\
\000\000\000\000\000\000\052\001\000\000\052\001\000\000\000\000\
\052\001\052\001\052\001\052\001\000\000\052\001\053\001\053\001\
\053\001\053\001\053\001\053\001\053\001\053\001\053\001\053\001\
\053\001\000\000\000\000\053\001\053\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\001\
\053\001\053\001\000\000\053\001\053\001\000\000\000\000\000\000\
\000\000\053\001\000\000\053\001\000\000\000\000\053\001\053\001\
\053\001\053\001\000\000\053\001\049\001\049\001\049\001\049\001\
\049\001\049\001\049\001\049\001\049\001\049\001\049\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\001\049\001\049\001\
\000\000\049\001\049\001\000\000\000\000\000\000\000\000\049\001\
\000\000\049\001\000\000\000\000\049\001\049\001\049\001\049\001\
\000\000\049\001\051\001\051\001\051\001\051\001\051\001\051\001\
\051\001\051\001\051\001\051\001\051\001\059\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\035\000\036\000\037\000\038\000\051\001\051\001\000\000\051\001\
\051\001\000\000\000\000\000\000\000\000\051\001\000\000\051\001\
\000\000\000\000\051\001\051\001\051\001\051\001\000\000\051\001\
\050\001\050\001\050\001\050\001\050\001\050\001\050\001\050\001\
\050\001\050\001\050\001\240\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\000\000\034\000\035\000\036\000\
\037\000\038\000\050\001\000\000\000\000\050\001\050\001\000\000\
\000\000\000\000\000\000\050\001\000\000\050\001\000\000\000\000\
\050\001\050\001\050\001\050\001\000\000\050\001\047\001\047\001\
\047\001\047\001\047\001\047\001\047\001\047\001\047\001\047\001\
\047\001\000\000\000\000\000\000\048\001\048\001\048\001\048\001\
\048\001\048\001\048\001\048\001\048\001\048\001\048\001\000\000\
\000\000\000\000\000\000\047\001\047\001\000\000\000\000\000\000\
\000\000\047\001\000\000\047\001\000\000\000\000\047\001\047\001\
\047\001\047\001\048\001\047\001\000\000\000\000\000\000\048\001\
\000\000\048\001\000\000\000\000\048\001\048\001\048\001\048\001\
\000\000\048\001\041\001\041\001\041\001\041\001\041\001\041\001\
\041\001\041\001\041\001\041\001\041\001\025\000\000\000\000\000\
\000\000\000\000\026\000\000\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\035\000\036\000\037\000\
\038\000\039\000\000\000\000\000\040\000\041\001\000\000\041\001\
\000\000\000\000\041\001\041\001\041\001\041\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\000\000\086\001\087\001\088\001\000\000\
\089\001\090\001\091\001\092\001\093\001\094\001\000\000\095\001\
\000\000\000\000\096\001\000\000\000\000\000\000\000\000\000\000\
\097\001\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\084\001\085\001\000\000\086\001\
\087\001\088\001\000\000\089\001\000\000\091\001\092\001\093\001\
\094\001\000\000\095\001\000\000\000\000\096\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\000\000\086\001\087\001\088\001\000\000\
\000\000\000\000\091\001\092\001\093\001\094\001\000\000\095\001\
\000\000\000\000\096\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\000\000\086\001\000\000\088\001\000\000\000\000\000\000\091\001\
\092\001\093\001\094\001\000\000\095\001\000\000\000\000\096\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\000\000\086\001\000\000\
\000\000\000\000\000\000\000\000\091\001\092\001\093\001\094\001\
\000\000\095\001\073\001\074\001\096\001\000\000\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\091\001\092\001\
\093\001\094\001\000\000\095\001\073\001\074\001\096\001\000\000\
\000\000\000\000\000\000\000\000\081\001\082\001\083\001\084\001\
\085\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\001\094\001\025\000\095\001\000\000\000\000\
\096\001\026\000\000\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\000\000\034\000\035\000\036\000\037\000\038\000\
\002\001\000\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\035\000\036\000\037\000\038\000\037\001\
\000\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\000\000\034\000\035\000\036\000\037\000\038\000\124\001\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\035\000\036\000\037\000\038\000\201\001\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\035\000\036\000\037\000\038\000\061\000\000\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\061\000\153\000\000\000\153\000\153\000\153\000\
\153\000\153\000\153\000\153\000\000\000\153\000\153\000\153\000\
\153\000\153\000\220\000\000\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\000\000\220\000\220\000\220\000\220\000\
\220\000\084\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\000\000\084\000\084\000\084\000\084\000\084\000\
\189\000\000\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\000\000\189\000\189\000\189\000\189\000\189\000"

let yycheck = "\001\000\
\002\000\115\001\051\000\085\000\020\000\020\000\017\000\100\001\
\092\000\057\000\060\001\223\000\235\000\236\000\005\001\017\000\
\001\001\217\000\131\000\021\000\103\000\253\000\254\000\001\001\
\048\001\144\000\001\001\033\001\228\000\001\001\045\000\006\001\
\081\000\033\001\034\001\127\000\021\001\001\001\021\000\024\001\
\054\001\026\001\134\000\049\001\046\000\060\000\119\001\120\001\
\001\001\051\000\001\001\033\001\069\001\006\001\056\000\069\001\
\068\001\059\000\060\000\061\000\001\001\049\001\145\000\111\000\
\076\001\024\001\148\000\026\001\000\000\075\001\076\001\000\000\
\074\000\001\001\076\000\001\001\054\001\060\000\070\001\081\000\
\006\001\072\001\054\001\085\000\076\001\197\001\198\001\001\001\
\076\001\069\001\054\001\069\001\006\001\075\001\076\001\097\000\
\071\001\069\001\114\000\114\000\102\000\054\001\104\000\054\001\
\001\001\069\001\091\001\092\001\093\001\192\000\068\001\075\001\
\071\001\054\001\130\000\130\000\069\001\075\001\069\001\091\001\
\092\001\093\001\001\001\071\001\075\001\127\000\054\001\006\001\
\069\001\131\000\001\001\133\000\134\000\135\000\075\001\006\001\
\071\001\139\000\091\001\092\001\093\001\069\001\144\000\068\001\
\192\000\071\001\148\000\075\001\005\001\000\000\021\001\076\001\
\076\000\024\001\204\001\001\001\027\001\071\001\069\001\103\001\
\006\001\072\001\025\001\179\000\179\000\132\001\133\001\021\001\
\112\001\125\001\024\001\007\001\071\001\009\001\150\001\151\001\
\152\001\153\001\180\000\179\001\180\001\181\001\182\001\054\001\
\068\001\002\002\003\002\004\002\072\001\006\002\192\000\047\002\
\048\002\049\002\050\002\023\001\024\001\070\001\069\001\091\001\
\092\001\093\001\019\000\076\001\253\000\049\001\222\000\222\000\
\054\001\133\000\068\001\135\000\015\001\071\002\001\001\042\001\
\070\001\075\001\076\001\006\001\091\001\092\001\093\001\069\001\
\071\001\062\002\072\001\070\001\243\000\075\001\076\001\075\001\
\076\001\076\001\051\000\052\000\068\001\091\001\092\001\093\001\
\033\001\073\001\033\001\075\001\076\001\082\002\005\001\068\001\
\001\001\033\001\042\001\253\000\110\002\006\001\075\001\076\001\
\002\001\003\001\068\001\005\001\001\001\007\001\001\001\009\001\
\019\001\006\001\068\001\054\001\095\001\096\001\072\001\129\002\
\005\001\019\001\076\001\138\001\093\000\094\000\095\000\025\001\
\097\000\040\001\069\001\110\001\030\001\143\002\113\001\033\001\
\115\001\116\001\068\001\037\001\038\001\068\001\040\001\158\001\
\042\001\123\001\076\001\059\001\059\001\076\001\076\001\166\001\
\091\001\092\001\093\001\251\001\001\001\024\001\015\001\026\001\
\139\001\006\001\060\001\054\001\021\001\022\001\023\001\024\001\
\069\001\068\001\001\001\028\001\029\001\030\001\119\001\006\001\
\001\001\076\001\069\001\021\001\159\001\006\001\024\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\001\001\016\001\
\017\001\018\001\019\001\020\001\069\001\068\001\068\001\072\001\
\091\001\092\001\093\001\068\001\021\001\076\001\185\001\024\001\
\068\001\054\001\021\001\076\001\072\001\024\001\125\001\021\001\
\027\001\069\001\024\001\021\001\026\001\119\001\024\001\054\001\
\069\001\123\001\066\002\000\000\068\002\054\001\021\001\068\001\
\072\002\024\001\091\001\092\001\093\001\068\001\069\001\076\001\
\138\001\072\001\001\001\054\001\069\001\076\001\091\001\092\001\
\093\001\068\001\075\001\010\002\197\001\070\001\001\001\153\001\
\075\001\076\001\069\001\006\001\158\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\166\001\016\001\017\001\018\001\
\019\001\020\001\091\001\092\001\093\001\081\000\082\000\070\001\
\091\001\092\001\093\001\001\001\182\001\091\001\092\001\093\001\
\011\002\068\001\130\002\001\001\068\001\204\001\001\001\054\001\
\006\001\001\001\074\001\197\001\091\001\092\001\093\001\201\001\
\202\001\021\001\204\001\054\001\024\001\021\001\069\001\054\001\
\024\001\153\002\021\001\068\001\156\002\024\001\073\001\072\001\
\027\001\076\001\069\001\076\001\083\002\068\001\069\001\086\002\
\075\001\072\001\053\002\090\002\136\000\137\000\138\000\139\000\
\054\001\001\001\002\001\003\001\004\001\005\001\073\001\070\001\
\054\001\076\001\069\002\054\001\071\002\076\001\054\001\069\001\
\069\001\021\001\113\002\072\001\024\001\021\001\070\001\069\001\
\024\001\120\002\069\001\021\001\006\002\069\001\024\001\031\001\
\010\002\183\000\184\000\185\000\186\000\187\000\188\000\189\000\
\190\000\191\000\068\001\091\001\092\001\093\001\072\001\197\000\
\091\001\092\001\093\001\110\002\052\001\053\001\054\001\068\001\
\001\001\057\001\058\001\072\001\001\001\061\001\212\000\001\001\
\214\000\006\001\066\001\067\001\006\001\069\001\129\002\071\001\
\050\002\021\001\022\001\023\001\024\001\025\001\026\001\070\001\
\021\001\029\001\030\001\024\001\143\002\076\001\027\001\091\001\
\092\001\093\001\076\001\091\001\092\001\093\001\001\001\245\000\
\068\001\091\001\092\001\093\001\072\001\070\001\068\001\075\001\
\076\001\083\002\075\001\076\001\086\002\054\001\076\001\054\001\
\090\002\054\001\021\001\068\001\054\001\024\001\074\001\091\001\
\092\001\093\001\075\001\076\001\069\001\068\001\069\001\069\001\
\069\001\072\001\072\001\069\001\068\001\069\001\072\001\113\002\
\072\001\075\001\076\001\075\001\076\001\068\001\120\002\091\001\
\092\001\093\001\068\001\054\001\001\001\076\001\091\001\092\001\
\093\001\006\001\076\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\069\001\016\001\017\001\018\001\019\001\020\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\001\000\002\000\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\073\001\
\068\001\054\001\076\001\097\001\069\001\099\001\100\001\006\001\
\076\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\069\001\016\001\017\001\018\001\019\001\020\001\075\001\072\001\
\001\001\069\001\075\001\076\001\072\001\001\001\002\001\003\001\
\004\001\005\001\006\001\075\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\075\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\149\001\
\070\001\029\001\030\001\031\001\032\001\068\001\076\001\021\001\
\022\001\023\001\024\001\074\001\001\001\001\001\001\001\029\001\
\030\001\001\001\006\001\006\001\075\001\054\001\006\001\001\001\
\052\001\053\001\054\001\069\001\006\001\057\001\058\001\068\001\
\069\001\061\001\021\001\072\001\069\001\024\001\066\001\067\001\
\027\001\069\001\070\001\071\001\068\001\069\001\196\001\075\001\
\072\001\075\001\076\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\074\001\091\001\
\092\001\093\001\054\001\054\001\069\001\021\001\054\001\054\001\
\024\001\069\001\026\001\001\001\054\001\091\001\092\001\093\001\
\068\001\069\001\069\001\068\001\072\001\069\001\069\001\072\001\
\076\001\075\001\076\001\069\001\068\001\001\001\002\001\003\001\
\004\001\005\001\073\001\075\001\076\001\076\001\001\001\069\001\
\091\001\092\001\093\001\006\001\091\001\092\001\093\001\070\001\
\068\001\021\001\022\001\023\001\024\001\025\001\026\001\075\001\
\076\001\029\001\030\001\031\001\032\001\077\001\068\001\069\001\
\054\001\001\001\072\001\076\001\077\001\001\001\006\001\091\001\
\092\001\093\001\068\001\091\001\092\001\093\001\072\001\069\001\
\052\001\053\001\054\001\001\001\069\001\057\001\058\001\045\002\
\074\001\061\001\021\001\054\001\068\001\024\001\066\001\067\001\
\027\001\069\001\073\001\071\001\068\001\076\001\060\002\075\001\
\062\002\072\001\069\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\054\001\091\001\
\092\001\093\001\054\001\054\001\082\002\001\001\002\001\003\001\
\004\001\005\001\068\001\069\001\073\001\069\001\072\001\076\001\
\054\001\069\001\069\001\001\001\002\001\003\001\004\001\005\001\
\068\001\021\001\022\001\023\001\024\001\025\001\026\001\069\001\
\068\001\029\001\030\001\031\001\073\001\240\000\241\000\076\001\
\091\001\092\001\093\001\073\001\122\002\068\001\076\001\070\001\
\005\001\031\001\073\001\074\001\075\001\076\001\075\001\076\001\
\052\001\053\001\054\001\068\001\069\001\057\001\058\001\072\001\
\075\001\061\001\044\001\045\001\075\001\076\001\066\001\067\001\
\086\001\069\001\068\001\057\001\154\002\068\001\072\001\061\001\
\068\001\075\001\076\001\068\001\066\001\067\001\072\001\069\001\
\066\001\067\001\059\000\069\001\061\000\001\001\072\001\091\001\
\092\001\093\001\006\001\068\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\068\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\075\001\076\001\001\001\
\033\001\029\001\030\001\076\001\006\001\068\001\075\001\070\001\
\068\001\001\001\073\001\074\001\075\001\076\001\006\001\075\001\
\076\001\075\001\076\001\021\001\022\001\023\001\024\001\025\001\
\026\001\069\001\054\001\029\001\030\001\021\001\022\001\023\001\
\024\001\025\001\026\001\068\001\033\001\029\001\030\001\072\001\
\033\001\069\001\075\001\076\001\124\001\069\001\126\001\075\001\
\068\001\068\001\070\001\069\001\054\001\073\001\074\001\075\001\
\076\001\068\001\091\001\092\001\093\001\068\001\054\001\091\001\
\092\001\093\001\068\001\069\001\075\001\076\001\072\001\068\001\
\068\001\075\001\076\001\069\001\068\001\069\001\075\001\076\001\
\072\001\069\001\001\001\075\001\076\001\068\001\075\001\006\001\
\074\001\091\001\092\001\093\001\075\001\076\001\091\001\092\001\
\093\001\075\001\076\001\091\001\092\001\093\001\021\001\022\001\
\023\001\024\001\025\001\026\001\068\001\033\001\029\001\030\001\
\075\001\076\001\075\001\076\001\006\001\069\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\069\001\016\001\017\001\
\018\001\019\001\020\001\001\001\068\001\076\001\024\001\054\001\
\026\001\073\001\068\001\075\001\076\001\075\001\076\001\033\001\
\068\001\075\001\076\001\068\001\074\001\068\001\069\001\075\001\
\076\001\072\001\075\001\076\001\075\001\076\001\075\001\049\001\
\068\001\091\001\092\001\093\001\068\001\044\001\045\001\091\001\
\092\001\093\001\075\001\076\001\091\001\092\001\093\001\054\001\
\055\001\056\001\068\001\075\001\076\001\071\001\072\001\039\000\
\040\000\075\001\076\001\066\001\067\001\090\001\069\001\068\001\
\068\001\072\001\070\001\002\001\003\001\073\001\074\001\075\001\
\076\001\091\001\092\001\093\001\006\001\073\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\005\001\016\001\017\001\
\018\001\019\001\020\001\033\001\037\001\038\001\024\001\068\001\
\026\001\033\001\201\001\202\001\033\001\033\000\034\000\033\001\
\006\001\075\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\075\001\016\001\017\001\018\001\019\001\020\001\049\001\
\068\001\068\001\024\001\005\001\026\001\076\001\068\001\068\001\
\005\001\068\001\068\001\033\001\068\001\075\001\076\001\068\001\
\075\001\076\001\068\001\075\001\076\001\071\001\075\001\076\001\
\075\001\075\001\076\001\049\001\069\001\091\001\092\001\093\001\
\091\001\092\001\093\001\091\001\092\001\093\001\091\001\092\001\
\093\001\091\001\092\001\093\001\069\001\068\001\068\001\072\001\
\068\001\071\001\068\001\068\001\070\001\075\001\076\001\073\001\
\074\001\075\001\076\001\001\001\002\001\003\001\004\001\005\001\
\068\001\007\001\091\001\092\001\093\001\091\001\092\001\093\001\
\006\001\068\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\068\001\016\001\017\001\018\001\019\001\020\001\068\001\
\068\001\068\001\024\001\070\001\026\001\075\001\073\001\074\001\
\075\001\076\001\068\001\033\001\006\001\068\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\068\001\016\001\017\001\
\018\001\019\001\020\001\049\001\069\001\068\001\024\001\072\001\
\026\001\068\001\068\001\002\000\068\001\046\000\091\000\033\001\
\075\001\076\001\069\001\075\001\076\001\072\001\068\001\101\000\
\255\001\071\001\091\001\092\001\093\001\075\001\076\001\049\001\
\091\001\092\001\093\001\091\001\092\001\093\001\115\001\009\002\
\091\001\092\001\093\001\065\000\068\001\091\001\092\001\093\001\
\072\001\119\000\068\001\075\001\076\001\071\001\068\001\025\001\
\070\001\075\001\076\001\073\001\074\001\075\001\076\001\068\001\
\111\000\070\001\030\001\137\001\073\001\074\001\075\001\076\001\
\143\000\091\001\092\001\093\001\006\001\157\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\180\000\016\001\017\001\
\018\001\019\001\020\001\042\001\123\000\068\001\024\001\070\001\
\026\001\065\002\073\001\074\001\075\001\076\001\068\001\033\001\
\070\001\247\000\124\002\073\001\074\001\075\001\076\001\008\001\
\009\001\010\001\011\001\012\001\255\255\024\001\023\001\049\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\068\001\255\255\255\255\071\001\068\001\255\255\
\070\001\075\001\076\001\073\001\074\001\075\001\076\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\255\255\091\001\092\001\093\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\255\255\068\001\255\255\
\029\001\030\001\072\001\255\255\255\255\075\001\076\001\255\255\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\255\255\091\001\092\001\093\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\091\001\092\001\
\093\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\001\001\255\255\255\255\255\255\255\255\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\001\001\091\001\
\092\001\093\001\255\255\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\091\001\092\001\093\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\054\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\091\001\092\001\093\001\069\001\255\255\
\255\255\072\001\255\255\054\001\075\001\076\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\068\001\069\001\001\001\255\255\072\001\255\255\255\255\
\006\001\076\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\001\001\
\031\001\255\255\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\052\001\053\001\054\001\
\255\255\255\255\057\001\058\001\255\255\255\255\061\001\255\255\
\054\001\255\255\255\255\066\001\067\001\255\255\069\001\001\001\
\002\001\003\001\004\001\005\001\075\001\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\054\001\075\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\069\001\255\255\031\001\255\255\255\255\
\255\255\075\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\031\001\
\255\255\255\255\052\001\053\001\054\001\255\255\255\255\057\001\
\058\001\255\255\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\255\255\069\001\052\001\053\001\054\001\073\001\
\031\001\057\001\058\001\255\255\255\255\061\001\255\255\255\255\
\255\255\255\255\066\001\067\001\255\255\069\001\255\255\255\255\
\255\255\073\001\255\255\255\255\255\255\052\001\053\001\054\001\
\255\255\255\255\057\001\058\001\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\066\001\067\001\255\255\069\001\255\255\
\255\255\255\255\073\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\031\001\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\031\001\255\255\255\255\052\001\053\001\
\054\001\255\255\255\255\057\001\058\001\255\255\255\255\061\001\
\255\255\255\255\255\255\255\255\066\001\067\001\255\255\069\001\
\052\001\053\001\054\001\073\001\031\001\057\001\058\001\255\255\
\255\255\061\001\255\255\255\255\255\255\255\255\066\001\067\001\
\255\255\069\001\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\052\001\053\001\054\001\255\255\255\255\057\001\058\001\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\067\001\255\255\069\001\255\255\255\255\255\255\073\001\001\001\
\002\001\003\001\004\001\005\001\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\031\001\255\255\006\001\
\033\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\049\001\255\255\052\001\053\001\054\001\255\255\255\255\057\001\
\058\001\255\255\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\067\001\255\255\069\001\255\255\255\255\071\001\073\001\
\255\255\255\255\075\001\076\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\070\001\
\026\001\255\255\255\255\255\255\255\255\255\255\006\001\033\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\071\001\255\255\255\255\
\255\255\075\001\076\001\001\001\255\255\255\255\255\255\255\255\
\006\001\031\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\071\001\
\255\255\255\255\255\255\075\001\076\001\255\255\052\001\053\001\
\054\001\255\255\255\255\057\001\058\001\255\255\255\255\061\001\
\255\255\255\255\255\255\255\255\066\001\067\001\255\255\069\001\
\255\255\071\001\001\001\255\255\255\255\255\255\255\255\006\001\
\054\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\069\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\255\255\001\001\002\001\003\001\004\001\005\001\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\031\001\054\001\
\255\255\255\255\255\255\064\001\065\001\066\001\067\001\255\255\
\069\001\255\255\255\255\072\001\255\255\255\255\069\001\255\255\
\031\001\255\255\255\255\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\255\255\255\255\061\001\255\255\255\255\255\255\
\255\255\066\001\067\001\255\255\069\001\052\001\053\001\054\001\
\255\255\255\255\057\001\058\001\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\066\001\067\001\006\001\069\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\054\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\068\001\069\001\255\255\255\255\072\001\
\255\255\255\255\064\001\065\001\066\001\067\001\255\255\069\001\
\255\255\255\255\072\001\255\255\070\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\068\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\255\255\072\001\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\255\255\255\255\068\001\255\255\070\001\255\255\072\001\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\066\001\
\067\001\255\255\069\001\255\255\255\255\072\001\255\255\255\255\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\066\001\067\001\255\255\
\069\001\255\255\255\255\072\001\255\255\255\255\075\001\255\255\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\066\001\067\001\255\255\069\001\255\255\
\255\255\072\001\255\255\074\001\255\255\255\255\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\066\001\067\001\255\255\069\001\255\255\255\255\072\001\
\255\255\074\001\255\255\255\255\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\255\255\255\255\072\001\255\255\255\255\
\255\255\255\255\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\255\255\255\255\072\001\255\255\255\255\255\255\255\255\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\066\001\067\001\255\255\069\001\255\255\
\255\255\072\001\255\255\255\255\255\255\255\255\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\255\255\255\255\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\065\001\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\255\255\255\255\255\255\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\255\255\062\001\
\063\001\255\255\255\255\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\058\001\059\001\060\001\255\255\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\046\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\255\255\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\255\255\078\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\255\255\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\059\001\060\001\255\255\062\001\
\063\001\255\255\255\255\255\255\255\255\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\255\255\078\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\075\001\076\001\255\255\078\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\075\001\076\001\063\001\078\001\255\255\255\255\255\255\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\075\001\076\001\
\255\255\078\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\075\001\076\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\058\001\059\001\060\001\255\255\
\062\001\063\001\064\001\065\001\066\001\067\001\255\255\069\001\
\255\255\255\255\072\001\255\255\255\255\255\255\255\255\255\255\
\078\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\255\255\062\001\255\255\064\001\065\001\066\001\
\067\001\255\255\069\001\255\255\255\255\072\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\058\001\059\001\060\001\255\255\
\255\255\255\255\064\001\065\001\066\001\067\001\255\255\069\001\
\255\255\255\255\072\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\255\255\060\001\255\255\255\255\255\255\064\001\
\065\001\066\001\067\001\255\255\069\001\255\255\255\255\072\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\255\255\
\255\255\255\255\255\255\255\255\064\001\065\001\066\001\067\001\
\255\255\069\001\044\001\045\001\072\001\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\064\001\065\001\
\066\001\067\001\255\255\069\001\044\001\045\001\072\001\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\066\001\067\001\001\001\069\001\255\255\255\255\
\072\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001"

let yynames_const = "\
  EOF\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  AUTO\000\
  REGISTER\000\
  RESTRICT\000\
  TEMPLATE\000\
  GLOBAL\000\
  SHARED\000\
  SIZEOF\000\
  ASM\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILDE\000\
  AND\000\
  PIPE\000\
  CIRC\000\
  EXCLAM\000\
  AND_AND\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  ATTRIBUTE\000\
  EXTENSION\000\
  INLINE\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  CST_STRING\000\
  NAMED_TYPE\000\
  GNU_ATTRS\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  RPAREN\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  ELSE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 270 "cparser.mly"
                (_1)
# 1955 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "cparser.mly"
                   ([])
# 1961 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 274 "cparser.mly"
                 (List.rev _1)
# 1968 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 277 "cparser.mly"
               ([_1])
# 1975 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 278 "cparser.mly"
                      (_2::_1)
# 1983 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 285 "cparser.mly"
   (DECDEF (set_name_group _1 (List.rev _2)))
# 1992 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'global_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * Cabs.statement) in
    Obj.repr(
# 287 "cparser.mly"
   (
				let (_, base, _, _) = _2 in
				match base with
				  PROTO _ ->
                   FUNDEF (set_single _1 _2, (snd _3))
				| OLD_PROTO _ ->
					OLDFUNDEF (set_single _1 _2, [], (snd _3))
				| _ ->
					assert false
			)
# 2010 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * Cabs.statement) in
    Obj.repr(
# 298 "cparser.mly"
   ( OLDFUNDEF (set_single _1 _2, List.rev _3, (snd _4)) )
# 2020 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 300 "cparser.mly"
   (ONLYTYPEDEF (set_name_group _1 []))
# 2028 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 302 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _3 in
			TYPEDEF (set_name_group (fst _2, snd _2) _3, []))
# 2038 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'gcc_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 305 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _4 in
			 TYPEDEF (set_name_group (fst _3, snd _3) _4, _1))
# 2049 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.base_type * Cabs.storage) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 308 "cparser.mly"
            ( _6 )
# 2058 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 312 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2066 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 314 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2075 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 316 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2084 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 318 "cparser.mly"
   (apply_mods _1 (NO_TYPE, NO_STORAGE))
# 2091 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 321 "cparser.mly"
                   ([])
# 2097 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 322 "cparser.mly"
                       (List.rev _1)
# 2104 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 325 "cparser.mly"
                  ([_1])
# 2111 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 326 "cparser.mly"
                               (_2::_1)
# 2119 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 329 "cparser.mly"
               (BASE_STORAGE STATIC)
# 2125 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "cparser.mly"
               (BASE_CONST)
# 2131 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 331 "cparser.mly"
                 (BASE_VOLATILE)
# 2137 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "cparser.mly"
                (BASE_STORAGE EXTERN)
# 2143 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "cparser.mly"
                                        (BASE_GLOBAL)
# 2149 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "cparser.mly"
                                        (BASE_SHARED)
# 2155 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 335 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2162 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 338 "cparser.mly"
                 (_1)
# 2169 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 339 "cparser.mly"
                           (apply_qual _1 _2)
# 2177 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 340 "cparser.mly"
                            ((fst _1, _2::(snd _1)))
# 2185 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 343 "cparser.mly"
                  ([_1])
# 2192 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 344 "cparser.mly"
                                (_3::_1)
# 2201 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 348 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2209 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 350 "cparser.mly"
   ((fst _1, snd _1, _2, _4))
# 2219 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 354 "cparser.mly"
   ((_1, set_tline NO_TYPE))
# 2226 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 356 "cparser.mly"
   (_2)
# 2235 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 358 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2242 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 360 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2249 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 362 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2256 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 364 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2263 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 366 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2271 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 368 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2281 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 370 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2290 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 372 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2300 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 374 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2312 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 376 "cparser.mly"
   ((fst _1, OLD_PROTO (snd _1, fst _3, snd _3)))
# 2322 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 378 "cparser.mly"
   ((fst _2, set_type (OLD_PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2334 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 382 "cparser.mly"
   (match (snd _1) with
			  PROTO _
			| OLD_PROTO _ ->
				(fst _1, snd _1, _2, NOTHING)
			| _ -> begin (*fatal();*) assert false end)
# 2346 "cparser.ml"
               : 'global_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 390 "cparser.mly"
   (match (snd _1) with
				  OLD_PROTO _ -> (fst _1, snd _1, _2, NOTHING)
				(*| PROTO (typ, [], ell) -> fst $1, OLD_PROTO (typ, [], ell), $2, NOTHING*)
				| _ -> begin
					(*fatal();
					Cprint.print_type (fun _ -> ()) (snd $1);
					print_string ("[" ^ !Cprint.line ^ "]");*)
					assert false
				end )
# 2362 "cparser.ml"
               : 'old_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardecs) in
    Obj.repr(
# 404 "cparser.mly"
                   ((List.rev _1, false))
# 2369 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 405 "cparser.mly"
                          ((List.rev _1, true))
# 2377 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 408 "cparser.mly"
              ([_1])
# 2384 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 409 "cparser.mly"
                             (_3::_1)
# 2393 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 410 "cparser.mly"
                                (_3::_1)
# 2402 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 414 "cparser.mly"
                  ([_1])
# 2409 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 415 "cparser.mly"
                            (_2::_1)
# 2417 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 419 "cparser.mly"
   (set_name_group _1 (List.rev _2))
# 2426 "cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 423 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2435 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 425 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2444 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_qual) in
    Obj.repr(
# 427 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2452 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "cparser.mly"
                   ([])
# 2458 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "cparser.mly"
               ([BASE_CONST])
# 2464 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "cparser.mly"
                 ([BASE_STORAGE REGISTER])
# 2470 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 435 "cparser.mly"
                 (_1)
# 2477 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 436 "cparser.mly"
                         (apply_qual _1 _2)
# 2485 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 437 "cparser.mly"
                      ((fst _1, BASE_CONST::(snd _1)))
# 2492 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 438 "cparser.mly"
                        ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 2499 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 441 "cparser.mly"
                ([_1])
# 2506 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 442 "cparser.mly"
                            (_3::_1)
# 2515 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 446 "cparser.mly"
   ((fst _1, snd _1, [], NOTHING))
# 2522 "cparser.ml"
               : 'old_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 450 "cparser.mly"
   ((_1, NO_TYPE))
# 2529 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 452 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2536 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 454 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2543 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 456 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2550 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 458 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2560 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 460 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2569 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 462 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2579 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 464 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2591 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 466 "cparser.mly"
   (_2)
# 2600 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 473 "cparser.mly"
    (DECDEF (set_name_group _1 (List.rev _2)))
# 2609 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 477 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2617 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 479 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2626 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 481 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2635 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "cparser.mly"
                   ([])
# 2641 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 485 "cparser.mly"
                      (List.rev _1)
# 2648 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 488 "cparser.mly"
                 ([_1])
# 2655 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 489 "cparser.mly"
                             (_2::_1)
# 2663 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 492 "cparser.mly"
               ( BASE_STORAGE STATIC )
# 2669 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 493 "cparser.mly"
              ( BASE_STORAGE AUTO )
# 2675 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 494 "cparser.mly"
               ( BASE_CONST )
# 2681 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 495 "cparser.mly"
                 ( BASE_VOLATILE )
# 2687 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "cparser.mly"
                 ( BASE_STORAGE REGISTER )
# 2693 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 497 "cparser.mly"
                ( BASE_STORAGE EXTERN )
# 2699 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 498 "cparser.mly"
                ( BASE_SHARED )
# 2705 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 499 "cparser.mly"
                ( BASE_GLOBAL )
# 2711 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 500 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2718 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 503 "cparser.mly"
                 (_1)
# 2725 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 504 "cparser.mly"
                          (apply_qual _1 _2)
# 2733 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 505 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 2741 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 508 "cparser.mly"
                 ([_1])
# 2748 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 509 "cparser.mly"
                               (_3::_1)
# 2757 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 513 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2765 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 515 "cparser.mly"
   ((fst _1, snd _1, _2, _4))
# 2775 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 519 "cparser.mly"
   ((_1, NO_TYPE))
# 2782 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 521 "cparser.mly"
   (Clexer.add_identifier _1;(_1, NO_TYPE))
# 2789 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 523 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2796 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 525 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2803 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 527 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2810 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 529 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2817 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 531 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2825 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 533 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2835 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 535 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2844 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 537 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2854 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 539 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2866 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 541 "cparser.mly"
   (_2)
# 2875 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 548 "cparser.mly"
   (apply_mods (snd _1) ((fst _1), NO_STORAGE))
# 2882 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 550 "cparser.mly"
   (apply_mods (BASE_CONST::(snd _2)) ((fst _2), NO_STORAGE))
# 2889 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 552 "cparser.mly"
   (apply_mods (BASE_VOLATILE::(snd _2)) ((fst _2), NO_STORAGE))
# 2896 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 555 "cparser.mly"
                  ((NAMED_TYPE _1, []))
# 2903 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_type) in
    Obj.repr(
# 556 "cparser.mly"
                  ((_1, []))
# 2910 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_qual) in
    Obj.repr(
# 557 "cparser.mly"
                    (_1)
# 2917 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 559 "cparser.mly"
               ( Clexer.add_type _1; (NAMED_TYPE _1, []))
# 2924 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 560 "cparser.mly"
                       ((NAMED_TYPE _1, [BASE_CONST]))
# 2931 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 561 "cparser.mly"
                          ((NAMED_TYPE _1, [BASE_VOLATILE]))
# 2938 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 562 "cparser.mly"
                       ((_1, [BASE_CONST]))
# 2945 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 563 "cparser.mly"
                         ((_1, [BASE_VOLATILE]))
# 2952 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 564 "cparser.mly"
                    ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_CONST]))
# 2959 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 565 "cparser.mly"
                      ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_VOLATILE]))
# 2966 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 568 "cparser.mly"
                 (_1)
# 2973 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 569 "cparser.mly"
                            (apply_qual _1 _2)
# 2981 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 570 "cparser.mly"
                         ((fst _1, BASE_CONST::(snd _1)))
# 2988 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 571 "cparser.mly"
                           ((fst _1, BASE_VOLATILE::(snd _1)))
# 2995 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 574 "cparser.mly"
                   ([_1])
# 3002 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 575 "cparser.mly"
                                  (_3::_1)
# 3011 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 579 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 3019 "cparser.ml"
               : 'typedef_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 583 "cparser.mly"
   ((_1, NO_TYPE))
# 3026 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 585 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3033 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 587 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3040 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 589 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3047 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 591 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3054 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 593 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3062 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 595 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3072 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 597 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3081 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 599 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 3091 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 601 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3103 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 603 "cparser.mly"
   (_2)
# 3112 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 609 "cparser.mly"
                      (_2::_1)
# 3120 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 610 "cparser.mly"
               ([_1])
# 3127 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 613 "cparser.mly"
                                  (set_name_group _1 (List.rev _2))
# 3136 "cparser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_qual) in
    Obj.repr(
# 617 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3144 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 619 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3153 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 621 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3162 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 624 "cparser.mly"
                   ([])
# 3168 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list) in
    Obj.repr(
# 625 "cparser.mly"
                      (List.rev _1)
# 3175 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 628 "cparser.mly"
                 ([_1])
# 3182 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 629 "cparser.mly"
                             (_2::_1)
# 3190 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 632 "cparser.mly"
              (BASE_CONST)
# 3196 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 633 "cparser.mly"
                 (BASE_VOLATILE)
# 3202 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 634 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3209 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 637 "cparser.mly"
                 (_1)
# 3216 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 638 "cparser.mly"
                          (apply_qual _1 _2)
# 3224 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 639 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 3232 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 642 "cparser.mly"
                              (_3::_1)
# 3241 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 643 "cparser.mly"
                  ([_1])
# 3248 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 646 "cparser.mly"
                 ((fst _1, snd _1, [], NOTHING))
# 3255 "cparser.ml"
               : 'field_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 650 "cparser.mly"
   (("", NO_TYPE))
# 3261 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 652 "cparser.mly"
   ((_1, NO_TYPE))
# 3268 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 654 "cparser.mly"
   ((_1, NO_TYPE))
# 3275 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 656 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3282 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 658 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3289 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 660 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3296 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 662 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3303 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 664 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3311 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 666 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3321 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 668 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3330 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 670 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 3340 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 672 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3352 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 674 "cparser.mly"
   (_2)
# 3361 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 676 "cparser.mly"
   ((_1, BITFIELD (NO_SIGN, _3)))
# 3370 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 682 "cparser.mly"
                   (([], false))
# 3376 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 683 "cparser.mly"
                   ((List.rev _1, false))
# 3383 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 684 "cparser.mly"
                              ((List.rev _1, true))
# 3392 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 687 "cparser.mly"
                           (_3::_1)
# 3401 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 688 "cparser.mly"
               ([_1])
# 3408 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_def) in
    Obj.repr(
# 692 "cparser.mly"
   (set_single _1 _2)
# 3416 "cparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 696 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3425 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 698 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3434 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_qual) in
    Obj.repr(
# 700 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3442 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 703 "cparser.mly"
                   ([])
# 3448 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods) in
    Obj.repr(
# 704 "cparser.mly"
                   (List.rev _1)
# 3455 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 707 "cparser.mly"
                 ([_1])
# 3462 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 708 "cparser.mly"
                          (_2::_1)
# 3470 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 711 "cparser.mly"
              (BASE_CONST)
# 3476 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 712 "cparser.mly"
                 (BASE_STORAGE REGISTER)
# 3482 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 713 "cparser.mly"
                 (BASE_VOLATILE)
# 3488 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 714 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3495 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 717 "cparser.mly"
                 (_1)
# 3502 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 718 "cparser.mly"
                          (apply_qual _1 _2)
# 3510 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 719 "cparser.mly"
                       ((fst _1, BASE_CONST::(snd _1)))
# 3517 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 720 "cparser.mly"
                          ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 3524 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 721 "cparser.mly"
                          ((fst _1, BASE_VOLATILE::(snd _1)))
# 3531 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 722 "cparser.mly"
                             ((fst _1, (BASE_GNU_ATTR _2)::(snd _1)))
# 3539 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 726 "cparser.mly"
   ( let (name, _type) = _1 in (name, _type, [], NOTHING) )
# 3546 "cparser.ml"
               : 'param_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 730 "cparser.mly"
   ( ("", NO_TYPE) )
# 3552 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 732 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3559 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 734 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3566 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 736 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3573 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 738 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3580 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 740 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3587 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 742 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3594 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 744 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3602 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 746 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3612 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 748 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3621 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 750 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3633 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 752 "cparser.mly"
   (_2)
# 3642 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_type_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_def) in
    Obj.repr(
# 759 "cparser.mly"
   (set_type (fst _1) _2)
# 3650 "cparser.ml"
               : 'only_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_qual) in
    Obj.repr(
# 763 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3658 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 765 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3667 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 767 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3676 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 770 "cparser.mly"
                   ([])
# 3682 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list) in
    Obj.repr(
# 771 "cparser.mly"
                     (List.rev _1)
# 3689 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 774 "cparser.mly"
                 (_1)
# 3696 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 775 "cparser.mly"
                          (apply_qual _1 _2)
# 3704 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 776 "cparser.mly"
                         ((fst _1, _2::(snd _1)))
# 3712 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 779 "cparser.mly"
                ([_1])
# 3719 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 780 "cparser.mly"
                           (_2::_1)
# 3727 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 783 "cparser.mly"
              (BASE_CONST)
# 3733 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 784 "cparser.mly"
                 (BASE_VOLATILE)
# 3739 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 785 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3746 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 788 "cparser.mly"
                (_1)
# 3753 "cparser.ml"
               : 'only_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 792 "cparser.mly"
   (NO_TYPE)
# 3759 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 794 "cparser.mly"
   (set_type (PTR NO_TYPE) _2)
# 3766 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 796 "cparser.mly"
   (set_type (RESTRICT_PTR NO_TYPE) _3)
# 3773 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 798 "cparser.mly"
   (set_type (CONST (PTR NO_TYPE)) _3)
# 3780 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 800 "cparser.mly"
   (set_type (VOLATILE (PTR NO_TYPE)) _3)
# 3787 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 802 "cparser.mly"
   (set_type (GNU_TYPE (_2, PTR NO_TYPE)) _3)
# 3795 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 804 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, smooth_expression _3)) _1)
# 3805 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 806 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, NOTHING)) _1)
# 3814 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 808 "cparser.mly"
   (set_type (PROTO (NO_TYPE, fst _5, snd _5)) _2)
# 3826 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 810 "cparser.mly"
   (_2)
# 3835 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 816 "cparser.mly"
             ((VOID, []))
# 3841 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 817 "cparser.mly"
              ((CHAR NO_SIGN, []))
# 3847 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 818 "cparser.mly"
              ((INT (NO_SIZE, NO_SIGN), []))
# 3853 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 819 "cparser.mly"
               ((FLOAT false, []))
# 3859 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 820 "cparser.mly"
                ((DOUBLE false, []))
# 3865 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 821 "cparser.mly"
              ((NO_TYPE, [BASE_SIZE LONG]))
# 3871 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 822 "cparser.mly"
               ((NO_TYPE, [BASE_SIZE SHORT]))
# 3877 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 823 "cparser.mly"
                ((NO_TYPE, [BASE_SIGN SIGNED]))
# 3883 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 824 "cparser.mly"
                 ((NO_TYPE, [BASE_SIGN UNSIGNED]))
# 3889 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 828 "cparser.mly"
   (STRUCT (_2, []))
# 3896 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 830 "cparser.mly"
   (STRUCT ("", List.rev _3))
# 3905 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 832 "cparser.mly"
   (STRUCT (_2, List.rev _4))
# 3915 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 834 "cparser.mly"
   (UNION (_2, []))
# 3922 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 836 "cparser.mly"
   (UNION ("", List.rev _3))
# 3931 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 838 "cparser.mly"
   (UNION (_2, List.rev _4))
# 3941 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 840 "cparser.mly"
   (ENUM (_2, []))
# 3948 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 842 "cparser.mly"
   (ENUM ("", List.rev _3))
# 3957 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 844 "cparser.mly"
   (ENUM (_2, List.rev _4))
# 3967 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 847 "cparser.mly"
              (_1)
# 3974 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 848 "cparser.mly"
                   (_1)
# 3981 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 850 "cparser.mly"
                         ([_1])
# 3988 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 851 "cparser.mly"
                              (_3::_1)
# 3997 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 853 "cparser.mly"
                      ((_1, NOTHING))
# 4004 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 854 "cparser.mly"
                          ((_1, _3))
# 4013 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 861 "cparser.mly"
   (CONSTANT (CONST_COMPOUND (List.rev _2)))
# 4022 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 863 "cparser.mly"
   (_1)
# 4029 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 867 "cparser.mly"
   ([_1])
# 4036 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 869 "cparser.mly"
   (_3::_1)
# 4045 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 871 "cparser.mly"
   (_1)
# 4053 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 875 "cparser.mly"
   (NOTHING)
# 4059 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 877 "cparser.mly"
   (smooth_expression _1)
# 4066 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 881 "cparser.mly"
   ([_1])
# 4073 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 883 "cparser.mly"
   (_3::_1)
# 4082 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 887 "cparser.mly"
   (CONSTANT _1)
# 4089 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 889 "cparser.mly"
   (VARIABLE _1)
# 4096 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 891 "cparser.mly"
   (EXPR_SIZEOF _2)
# 4103 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'only_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 893 "cparser.mly"
   (TYPE_SIZEOF _3)
# 4112 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 895 "cparser.mly"
   (UNARY (PLUS, _2))
# 4119 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 897 "cparser.mly"
   (UNARY (MINUS, _2))
# 4126 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 899 "cparser.mly"
   (UNARY (MEMOF, _2))
# 4133 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 901 "cparser.mly"
   (UNARY (ADDROF, _2))
# 4140 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 903 "cparser.mly"
   (UNARY (NOT, _2))
# 4147 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 905 "cparser.mly"
   (UNARY (BNOT, _2))
# 4154 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 907 "cparser.mly"
   (UNARY (PREINCR, _2))
# 4161 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 909 "cparser.mly"
   (UNARY (POSINCR, _1))
# 4168 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 911 "cparser.mly"
   (UNARY (PREDECR, _2))
# 4175 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 913 "cparser.mly"
   (UNARY (POSDECR, _1))
# 4182 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 915 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4190 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 917 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4198 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 919 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4206 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 921 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4214 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * int) * Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 923 "cparser.mly"
   (Clexer.test_gcc(); set_eline _1 (GNU_BODY (snd _2)))
# 4223 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 925 "cparser.mly"
   (set_eline _1 (smooth_expression _2))
# 4232 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'only_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 927 "cparser.mly"
   (set_eline _1 (CAST (_2, _4)))
# 4242 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 929 "cparser.mly"
   (set_eline _2 (CALL (_1, list_expression _3)))
# 4252 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 931 "cparser.mly"
   (INDEX (_1, smooth_expression _3))
# 4262 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 933 "cparser.mly"
   (QUESTION (_1, _3, _5))
# 4273 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 935 "cparser.mly"
   (BINARY(ADD ,_1 , _3))
# 4281 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 937 "cparser.mly"
   (BINARY(SUB ,_1 , _3))
# 4289 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 939 "cparser.mly"
   (BINARY(MUL ,_1 , _3))
# 4297 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 941 "cparser.mly"
   (BINARY(DIV ,_1 , _3))
# 4305 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 943 "cparser.mly"
   (BINARY(MOD ,_1 , _3))
# 4313 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 945 "cparser.mly"
   (BINARY(AND ,_1 , _3))
# 4321 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 947 "cparser.mly"
   (BINARY(OR ,_1 , _3))
# 4329 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 949 "cparser.mly"
   (BINARY(BAND ,_1 , _3))
# 4337 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 951 "cparser.mly"
   (BINARY(BOR ,_1 , _3))
# 4345 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 953 "cparser.mly"
   (BINARY(XOR ,_1 , _3))
# 4353 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 955 "cparser.mly"
   (BINARY(EQ ,_1 , _3))
# 4361 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 957 "cparser.mly"
   (BINARY(NE ,_1 , _3))
# 4369 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 959 "cparser.mly"
   (BINARY(LT ,_1 , _3))
# 4377 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 961 "cparser.mly"
   (BINARY(GT ,_1 , _3))
# 4385 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 963 "cparser.mly"
   (BINARY(LE ,_1 , _3))
# 4393 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 965 "cparser.mly"
   (BINARY(GE ,_1 , _3))
# 4401 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 967 "cparser.mly"
   (BINARY(SHL ,_1 , _3))
# 4409 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 969 "cparser.mly"
   (BINARY(SHR ,_1 , _3))
# 4417 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 971 "cparser.mly"
   (set_eline _2 (BINARY(ASSIGN ,_1 , _3)))
# 4426 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 973 "cparser.mly"
   (set_eline _2 (BINARY(ADD_ASSIGN ,_1 , _3)))
# 4435 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 975 "cparser.mly"
   (set_eline _2 (BINARY(SUB_ASSIGN ,_1 , _3)))
# 4444 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 977 "cparser.mly"
   (set_eline _2 (BINARY(MUL_ASSIGN ,_1 , _3)))
# 4453 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 979 "cparser.mly"
   (set_eline _2 (BINARY(DIV_ASSIGN ,_1 , _3)))
# 4462 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 981 "cparser.mly"
   (set_eline _2 (BINARY(MOD_ASSIGN ,_1 , _3)))
# 4471 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 983 "cparser.mly"
   (set_eline _2 (BINARY(BAND_ASSIGN ,_1 , _3)))
# 4480 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 985 "cparser.mly"
   (set_eline _2 (BINARY(BOR_ASSIGN ,_1 , _3)))
# 4489 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 987 "cparser.mly"
   (set_eline _2 (BINARY(XOR_ASSIGN ,_1 , _3)))
# 4498 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 989 "cparser.mly"
   (set_eline _2 (BINARY(SHL_ASSIGN ,_1 , _3)))
# 4507 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 991 "cparser.mly"
   (set_eline _2 (BINARY(SHR_ASSIGN ,_1 , _3)))
# 4516 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 994 "cparser.mly"
                (CONST_INT _1)
# 4523 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 995 "cparser.mly"
                  (CONST_FLOAT _1)
# 4530 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 996 "cparser.mly"
                 (CONST_CHAR _1)
# 4537 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 997 "cparser.mly"
                    (CONST_STRING _1)
# 4544 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1000 "cparser.mly"
                  (_1)
# 4551 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1001 "cparser.mly"
                            (_1 ^ _2)
# 4559 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1007 "cparser.mly"
                (Clexer.push_context (); _1)
# 4566 "cparser.ml"
               : 'body_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1010 "cparser.mly"
               (_1)
# 4573 "cparser.ml"
               : 'body_middle))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'body_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'body_middle) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1014 "cparser.mly"
                                 (Clexer.pop_context(); (_1, _2))
# 4582 "cparser.ml"
               : (string * int) * Cabs.statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1017 "cparser.mly"
                   ([])
# 4588 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'locals) in
    Obj.repr(
# 1018 "cparser.mly"
                (List.rev _1)
# 4595 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1021 "cparser.mly"
              ([_1])
# 4602 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'locals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1022 "cparser.mly"
                    (_2::_1)
# 4610 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1025 "cparser.mly"
                  ([_1; _2])
# 4618 "cparser.ml"
               : 'twolocals))
; (fun __caml_parser_env ->
    Obj.repr(
# 1028 "cparser.mly"
                   (NOP)
# 4624 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1029 "cparser.mly"
               (_1)
# 4631 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1032 "cparser.mly"
                    (_1)
# 4638 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1033 "cparser.mly"
                         (SEQUENCE(_1, _2))
# 4646 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1041 "cparser.mly"
          ( DEFINITION _1 )
# 4653 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1043 "cparser.mly"
    (set_line _1 NOP)
# 4660 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1045 "cparser.mly"
   (set_line _2 (COMPUTATION (smooth_expression _1)))
# 4668 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * Cabs.statement) in
    Obj.repr(
# 1047 "cparser.mly"
   (set_line (fst _1) (BLOCK (snd _1)))
# 4675 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1049 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, NOP)))
# 4686 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1051 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, set_line _6 _7)))
# 4699 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1053 "cparser.mly"
   (set_line _1 (SWITCH (smooth_expression _3, _5)))
# 4710 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1055 "cparser.mly"
   (set_line _1 (WHILE (smooth_expression _3, _5)))
# 4721 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1057 "cparser.mly"
(set_line _1 (DOWHILE (smooth_expression _5, _2)))
# 4734 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : Cabs.base_type * Cabs.storage) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Cabs.name list) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1060 "cparser.mly"
        (set_line _1 (SEQUENCE(DEFINITION
                                 (DECDEF (set_name_group _3 (List.rev _4))),
                               FOR (NOTHING, _6, _8, _10))))
# 4752 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1065 "cparser.mly"
  (set_line _1 (FOR (_3, _5, _7, _9)))
# 4767 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1067 "cparser.mly"
   (LABEL (_1, _3))
# 4776 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1069 "cparser.mly"
   (set_line _1 (CASE (_2, _4)))
# 4786 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1071 "cparser.mly"
   (set_line _1 (DEFAULT _3))
# 4795 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1073 "cparser.mly"
   (set_line _1 (RETURN NOTHING))
# 4803 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1075 "cparser.mly"
   (set_line _1 (RETURN _2))
# 4812 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1077 "cparser.mly"
   (set_line _1 BREAK)
# 4820 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1079 "cparser.mly"
   (set_line _1 CONTINUE)
# 4828 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1081 "cparser.mly"
   (set_line _1 (GOTO _2))
# 4837 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1083 "cparser.mly"
   ( ASM _3 )
# 4847 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'gnu_asm_io) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_asm_io) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_asm_mods) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1085 "cparser.mly"
   ( Clexer.test_gcc(); GNU_ASM (_3, List.rev _4, List.rev _5, List.rev _6) )
# 4860 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_args) in
    Obj.repr(
# 1092 "cparser.mly"
  ( _2 )
# 4868 "cparser.ml"
               : 'gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1097 "cparser.mly"
  ( [_1] )
# 4875 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1099 "cparser.mly"
  ( _3::_1 )
# 4884 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1104 "cparser.mly"
  ( ("", _1, _3) )
# 4894 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1106 "cparser.mly"
  ( (_2, _4, _6) )
# 4907 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 1111 "cparser.mly"
  ( [] )
# 4913 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_mods) in
    Obj.repr(
# 1113 "cparser.mly"
  ( _2 )
# 4921 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1118 "cparser.mly"
  ( [_1] )
# 4928 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1120 "cparser.mly"
  ( _3::_1 )
# 4937 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 1127 "cparser.mly"
  ( Clexer.test_gcc(); [] )
# 4943 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1129 "cparser.mly"
  ( Clexer.test_gcc(); List.rev _1 )
# 4950 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1133 "cparser.mly"
  ( _1 )
# 4957 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1135 "cparser.mly"
  ( List.append _1 _2 )
# 4965 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1139 "cparser.mly"
  ( List.rev _4 )
# 4976 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1143 "cparser.mly"
  ( [GNU_EXTENSION] )
# 4982 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1145 "cparser.mly"
  ( [GNU_INLINE] )
# 4988 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1150 "cparser.mly"
  ( [] )
# 4994 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_args) in
    Obj.repr(
# 1152 "cparser.mly"
  ( _1 )
# 5001 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1157 "cparser.mly"
  ([_1])
# 5008 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1159 "cparser.mly"
  (_3::_1)
# 5017 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_id) in
    Obj.repr(
# 1164 "cparser.mly"
  ( GNU_ID _1 )
# 5024 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 1166 "cparser.mly"
  ( GNU_CST _1 )
# 5031 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_gnu_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1168 "cparser.mly"
  ( GNU_CALL (_1, List.rev _3) )
# 5041 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1173 "cparser.mly"
  ( _1 )
# 5048 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1175 "cparser.mly"
  (
			match _1 with
			  [(Cabs.GNU_ID name)] -> name
			| _ -> assert false
		)
# 5059 "cparser.ml"
               : 'gnu_id))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1183 "cparser.mly"



# 5092 "cparser.ml"
